<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="clr-namespace:StyleManager"

	xmlns:contract="clr-namespace:UIFramework.Contract.Interfaces;assembly=UIFramework.Contract"
	xmlns:CommonControls="clr-namespace:StyleManager.CommonControls"
	xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
	xmlns:System="clr-namespace:System;assembly=mscorlib"
	x:Class="StyleManager.Main">

	<local:StaticDoubleValueProvider x:Key="Static_EEditFontSize1" ResourceKey="EEditFontSize1"                               />
	<local:StaticDoubleValueProvider x:Key="Static_EInfoWindowFontSize1" ResourceKey="EInfoWindowFontSize1"                   />
    <local:StaticDoubleValueProvider x:Key="Static_EInfoWindowFontSizeGroup" ResourceKey="EInfoWindowFontSizeGroup"                   />
    <local:StaticDoubleValueProvider x:Key="Static_EInfoWindowFontSizeMacro" ResourceKey="EInfoWindowFontSizeMacro"                   />
    <local:StaticDoubleValueProvider x:Key="Static_EInfoWindowFontSizeSub" ResourceKey="EInfoWindowFontSizeSub"                   />
    <local:StaticDoubleValueProvider x:Key="Static_EInfoWindowVersion2FontSize1" ResourceKey="EInfoWindowVersion2FontSize1"   />
	<local:StaticDoubleValueProvider x:Key="Static_EInfoWindowMagnifiedFontSize1" ResourceKey="EInfoWindowMagnifiedFontSize1" />
    <local:StaticDoubleValueProvider x:Key="Static_ELabelStyle2FontSize" ResourceKey="ELabelStyle2FontSize"                   />
    <local:StaticDoubleValueProvider x:Key="Static_ELabelStyleQElaxto2d" ResourceKey="ELabelStyleQElaxto2d"                   />
    <local:StaticDoubleValueProvider x:Key="Static_ETouchScreenBtnFontSize1" ResourceKey="ETouchScreenBtnFontSize1"           />
	<local:StaticDoubleValueProvider x:Key="Static_ETouchScreenTabFontSize1" ResourceKey="ETouchScreenTabFontSize1"           />
	<local:StaticDoubleValueProvider x:Key="Static_EVirtualkeyboardBtnOnMainScreenFontSize1" ResourceKey="EVirtualkeyboardBtnOnMainScreenFontSize1" />

	<local:StaticDoubleValueProvider x:Key="Static_ETouchScreenABtnFontSize1" ResourceKey="ETouchScreenABtnFontSize1" />
	<local:StaticDoubleValueProvider x:Key="Static_ETouchScreenBBtnFontSize1" ResourceKey="ETouchScreenBBtnFontSize1" />
	<local:StaticDoubleValueProvider x:Key="Static_ETouchScreenMBtnFontSize1" ResourceKey="ETouchScreenMBtnFontSize1" />
	<local:StaticDoubleValueProvider x:Key="Static_ETouchScreenSBtnFontSize1" ResourceKey="ETouchScreenSBtnFontSize1" />
    <local:StaticDoubleValueProvider x:Key="Static_ETouchScreenSBtnFontSize2" ResourceKey="ETouchScreenSBtnFontSize2" />
    <local:RowSpanConverter          x:Key="RowSpanConverterInstance"  />
    <local:VerticalAlignmentConverter x:Key="VerticalAlignmentConverterInstance"/>

    <local:CornerRadiusConverter x:Key="CornerRadiusConverterInstance" />
	<local:FontSizeConverter     x:Key="FontSizeConverterInstance"   StandardWindowWidth="1280.0" StandardWindowHeight="768.0" />
	<local:FontSizeConverterTS   x:Key="FontSizeConverterTSInstance" StandardWindowWidth="1024.0" StandardWindowHeight="600.0" />
	<local:FontSizeMenuConverter     x:Key="FontSizeMenuConverterInstance"   StandardWindowWidth="1280.0" StandardWindowHeight="720.0" />
	<local:FontSizeMeasureMenuConverter     x:Key="FontSizeMeasureMenuConverterInstance"   StandardWindowWidth="1280.0" StandardWindowHeight="720.0" />
	<local:TextConverter x:Key="TextConverterInstance"></local:TextConverter>
	<local:ExpanderConverter x:Key="ExpanderConverterInstance"></local:ExpanderConverter>
    


    <Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenMeasureButton">
        <Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
        <Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
        <Setter Property="Grid.RowSpan" Value="{Binding Path=AuthorsForTS, Converter={StaticResource RowSpanConverterInstance}}" />
        <Setter Property="TextBlock.VerticalAlignment" Value="{Binding Path=AuthorsForTS, Converter={StaticResource VerticalAlignmentConverterInstance}}" />

        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="TextBlock.FontSize">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenSBtnFontSize1}">
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        
        
    </Style>
    <Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenSpecialEvaluateButton">
        <Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
        <Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
        <Setter Property="Grid.RowSpan" Value="{Binding Path=AuthorsForTS, Converter={StaticResource RowSpanConverterInstance}}" />
        <Setter Property="TextBlock.VerticalAlignment" Value="{Binding Path=AuthorsForTS, Converter={StaticResource VerticalAlignmentConverterInstance}}" />

        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="TextBlock.FontSize">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenSBtnFontSize2}">
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>


    </Style>

    <Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenMark">
        <Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
        <Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
  
        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="TextBlock.FontSize">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenSBtnFontSize1}">
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>


    </Style>

    <Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenMeasureAuthor">
                <Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
                <Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
                <Setter Property="TextBlock.FontStyle" Value="Italic"></Setter>
        <Setter Property="TextBlock.FontSize" Value="12" ></Setter>
    </Style>

    <!-- non funziona su textbox !!-->
	<Style TargetType="{x:Type Control}">
		<Setter Property="Control.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="Control.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="Control.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EEditFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth"  />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- la labelstyle1 prende questo di default!! -->
	<Style TargetType="{x:Type TextBlock}">
		<!-- per i testi conta solo questo...-->
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<!--<Setter Property="TextBlock.FontSize" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}, Path=., Converter={StaticResource FontSizeConverterInstance}, ConverterParameter={StaticResource EEditFontSize1}}"/>-->
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EEditFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>                  
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="LightGray" />
            </Trigger>
        </Style.Triggers>
	</Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="ETouchscreenMeasureLabel">
        <!-- per i testi conta solo questo...-->
        <Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
        <Setter Property="TextBlock.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
        <!--<Setter Property="TextBlock.FontSize" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}, Path=., Converter={StaticResource FontSizeConverterInstance}, ConverterParameter={StaticResource EEditFontSize1}}"/>-->
        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="TextBlock.FontSize" Value="20">
                    <!--<Setter.Value>
                        <MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EEditFontSize1}">
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
                        </MultiBinding>
                    </Setter.Value>-->
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TextBox}" x:Key="ETextBoxFonts">
		<Setter Property="Control.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="Control.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<!--<Setter Property="Control.FontSize" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}, Path=., Converter={StaticResource FontSizeConverterInstance}, ConverterParameter={StaticResource EEditFontSize1}}"/>-->
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="Control.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EEditFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="ELabelStyle2FontsActiveObj">
        <Setter Property="Control.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource EActiveObjectColor}" />
            </Setter.Value>
        </Setter>
        <!--ELabelStyle2FontFamily-->
        <Setter Property="Control.FontWeight" Value="{DynamicResource ELabelStyle2FontWeight}"/>
        <!--<Setter Property="Control.FontSize" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}, Path=., Converter={StaticResource FontSizeConverterInstance}, ConverterParameter={StaticResource ELabelStyle2FontSize}}"/>-->
        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="TextBlock.FontSize">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_ELabelStyle2FontSize}">
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--used on ELabelStyle2 (labels on exams list window header)-->
	<Style TargetType="{x:Type TextBlock}" x:Key="ELabelStyle2Fonts">
		<Setter Property="Control.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
			</Setter.Value>
		</Setter>
		<!--ELabelStyle2FontFamily-->
		<Setter Property="Control.FontWeight" Value="{DynamicResource ELabelStyle2FontWeight}"/>
		<!--<Setter Property="Control.FontSize" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}, Path=., Converter={StaticResource FontSizeConverterInstance}, ConverterParameter={StaticResource ELabelStyle2FontSize}}"/>-->
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_ELabelStyle2FontSize}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="ELabelStyleQElaxto2d">
        <Setter Property="Control.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
            </Setter.Value>
        </Setter>
        <!--ELabelStyle2FontFamily-->
        <Setter Property="Control.FontWeight" Value="{DynamicResource ELabelStyle2FontWeight}"/>
        <!--<Setter Property="Control.FontSize" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}, Path=., Converter={StaticResource FontSizeConverterInstance}, ConverterParameter={StaticResource ELabelStyle2FontSize}}"/>-->
        <Style.Triggers>
            <Trigger Property="IsVisible" Value="True">
                <Setter Property="TextBlock.FontSize">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource ELabelStyleQElaxto2d}">
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
                            <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- fixed size fonts to be used on simulated ts when centered on screen-->
	<Style TargetType="{x:Type TextBlock}"  x:Key="ETSFontsOnMainScreen">
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<Setter Property="TextBlock.Margin" Value="0"/>
		<Setter Property="TextBlock.HorizontalAlignment" Value="Center"/>
		<Setter Property="TextBlock.VerticalAlignment" Value="Center"/>
		<Setter Property="TextBlock.FontSize">
			<Setter.Value>
				<MultiBinding Converter="{StaticResource FontSizeMenuConverterInstance}" ConverterParameter="{StaticResource Static_EEditFontSize1}">
					<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=1}" Path="ActualWidth" />
					<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=1}" Path="ActualHeight" />
				</MultiBinding>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- this is used in desktop installation-->
	<Style TargetType="{x:Type TextBlock}"  x:Key="ETSScaledFontsOnMainScreen">
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<Setter Property="TextBlock.Margin" Value="0"/>
		<Setter Property="TextBlock.HorizontalAlignment" Value="Center"/>
		<Setter Property="TextBlock.VerticalAlignment" Value="Center"/>
		<!--<Setter Property="TextBlock.FontSize" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}, Path=., Converter={StaticResource FontSizeConverterInstance}, ConverterParameter={StaticResource ETouchScreenBtnFontSize1}}"/>-->
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EVirtualkeyboardBtnOnMainScreenFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenBtnFonts">
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
		<Setter Property="TextBlock.Foreground"  Value="Pink"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenBtnFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenABtnFonts">
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenABtnFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenBBtnFonts">
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenBBtnFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenMBtnFonts">
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenMBtnFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenSBtnFonts">
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenSBtnFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type TextBlock}"  x:Key="ETouchScreenTabHeader">
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
		<Setter Property="TextBlock.TextAlignment" Value="Center"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterTSInstance}" ConverterParameter="{StaticResource Static_ETouchScreenTabFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
			<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem},
											   Path=IsMouseOver}" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource ETouchscreenTABFontColor}"/>
			</DataTrigger>

			<DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem},
											   Path=IsSelected}" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource ETouchscreenTABFontColor}"/>
			</DataTrigger>

		</Style.Triggers>
	</Style>

	<Style TargetType="{x:Type TextBlock}"  x:Key="ETabHeader1">
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<!--<Setter Property="TextBlock.FontSize" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}, Path=., Converter={StaticResource FontSizeConverterInstance}, ConverterParameter={StaticResource ETouchScreenTabFontSize1}}"/>-->
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_ETouchScreenTabFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>

		</Style.Triggers>
	</Style>

	<!-- standard button style-->
	<!--brushes for internal use-->
	<LinearGradientBrush x:Key="IGelBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
		<GradientStop Color="Transparent" Offset="0" />
		<GradientStop Color="Transparent" Offset="1" />
	</LinearGradientBrush>
       <Style  x:Key="IGelRectangleTemplate" TargetType="Rectangle">
		<Setter Property="Opacity" Value="1"/>
		<Setter Property="Panel.ZIndex" Value="0"/>
		<Setter Property="RadiusX" Value="{DynamicResource EButtonShapeRadiusX1}"/>
		<Setter Property="RadiusY" Value="{DynamicResource EButtonShapeRadiusY1}"/>
		<!--<Setter Property="Fill" Value="{TemplateBinding Background}"/>-->
		<Setter Property="StrokeThickness" Value="0.35"/>
		<Setter Property="Stroke" Value="{DynamicResource EControlBorderBrush1}"/>
	</Style>
    <Style  x:Key="IGelQWERTYRectangleTemplate" TargetType="Rectangle">
        <Setter Property="Opacity" Value="1"/>
        <Setter Property="Panel.ZIndex" Value="0"/>
        <Setter Property="RadiusX" Value="{DynamicResource EButtonShapeRadiusX1}"/>
        <Setter Property="RadiusY" Value="{DynamicResource EButtonShapeRadiusY1}"/>
        <!--<Setter Property="Fill" Value="{TemplateBinding Background}"/>-->
        <Setter Property="StrokeThickness" Value="0"/>
        <Setter Property="Stroke" Value="{DynamicResource EControlBorderBrush1}"/>
    </Style>
    <Style  x:Key="IGelRectangleTemplateBDMeasure" TargetType="Rectangle">
		<Setter Property="Opacity" Value="1"/>
		<Setter Property="Panel.ZIndex" Value="0"/>
 
		<!--<Setter Property="Fill" Value="{TemplateBinding Background}"/>-->
		<Setter Property="StrokeThickness" Value="0.35"/>
		<Setter Property="Stroke" Value="{DynamicResource EControlBorderBrush1}"/>
	</Style>

	<Style  x:Key="IGelShineTemplate" TargetType="Rectangle">
		<Setter Property="Height" Value="15px"/>
		<Setter Property="Opacity" Value="1"/>
		<Setter Property="Panel.ZIndex" Value="1"/>
		<Setter Property="Margin" Value="2,2,2,0"/>
		<Setter Property="VerticalAlignment" Value="Top"/>
		<Setter Property="Panel.ZIndex" Value="1"/>
		<Setter Property="RadiusX" Value="{DynamicResource EButtonShineRadiusX1}"/>
		<Setter Property="RadiusY" Value="{DynamicResource EButtonShineRadiusY1}"/>
		<Setter Property="Stroke" Value="Transparent"/>
	</Style>

	<ControlTemplate TargetType="Button" x:Key="EButtonRezzonicoTemplate2">
		<Grid>
			<Viewbox Width="85.04" Height="85.04">
				<Canvas Width="85.04" Height="85.04">
					<Canvas>
						<Canvas>
							<Path Fill="Brown" Data="F1M85.04,70.866C85.04,78.694,78.696,85.04,70.868,85.04L14.175,85.04C6.347,85.04,0,78.694,0,70.866L0,14.173C0,6.345,6.347,0,14.175,0L70.868,0C78.696,0,85.04,6.345,85.04,14.173L85.04,70.866z">

							</Path>
							<Path Fill="LightYellow" Data="F1M15.187,4.253C9.158,4.253,4.253,9.155,4.253,15.185L4.253,69.854C4.253,75.882,9.158,80.788,15.187,80.788L69.856,80.788C75.884,80.788,80.79,75.882,80.79,69.854L80.79,15.185C80.79,9.155,75.884,4.253,69.856,4.253L15.187,4.253z">

							</Path>
						</Canvas>
					</Canvas>
				</Canvas>
			</Viewbox>
			<ContentPresenter  Margin="10,5,10,5" VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="contentPresenter" OpacityMask="#FF000000"/>
		</Grid>
	</ControlTemplate>

	<!--button Rezzonico : viene caricato da file xaml-->
	<!---->
  <Style x:Key="EButtonStyleRezzonico" TargetType="{x:Type ButtonBase}">
	<!-- BasedOn="{StaticResource EButtonFonts}"-->
	<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
	<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
	<Setter Property="Margin" Value="1"/>
	<Setter Property="Background" Value="{DynamicResource EButtonBackground1}"/>
	<Setter Property="Template" Value="{DynamicResource EButtonRezzonicoTemplate}">
	</Setter>

	<Style.Triggers>
		<Trigger Property="IsMouseOver" Value="True">
			<Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
		</Trigger>
		<Trigger Property="IsPressed" Value="True">
			<Setter Property="Template" Value="{DynamicResource EButtonRezzonicoTemplate2}"/>
		</Trigger>
	</Style.Triggers>
	</Style>

	<DropShadowEffect x:Key="IButtonShadowEffect"  Color="#FF000000" ShadowDepth="3" PresentationOptions:Freeze="True" />
	<!-- {DynamicResource EButtonShadowBlurRadius} {DynamicResource EButtonShadowDepth} {DynamicResource EButtonShadowColor}-->
	<!-- {DynamicResource EButtonShadowBlurRadius} {DynamicResource EButtonShadowDepth} {DynamicResource EButtonShadowColor}-->
	<!--button-->

	<Style x:Key ="roundButtonTemplate" TargetType ="{x:Type Button}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property ="Template">
			<Setter.Value>
				<ControlTemplate TargetType ="{x:Type Button}">
					<Grid RenderTransformOrigin="0.5,0.5" x:Name="RootGrid">
						<Ellipse x:Name ="OuterRing" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}"/>
						<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property ="IsPressed" Value ="True">
							<Setter TargetName="RootGrid" Property="RenderTransform">
								<Setter.Value>
									<ScaleTransform ScaleX="0.9" ScaleY="0.9"/>
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-->


	<Style x:Key="EButtonStyleScrollTS" TargetType="{x:Type ButtonBase}">
		<!-- BasedOn="{StaticResource EButtonFonts}"-->
		<Setter Property="Margin" Value="{DynamicResource EButtonMargin2}"/>
		<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="Background" Value="{DynamicResource EButtonBackground1}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="10,5,10,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
						<Rectangle x:Name="GelBackground" Style="{StaticResource IGelRectangleTemplateBDMeasure}" Fill="{TemplateBinding Background}" >
						</Rectangle>
						<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

    <Style x:Key="EButtonStyleQWERTY" TargetType="{x:Type ButtonBase}">
        <!-- BasedOn="{StaticResource EButtonFonts}"-->
        <Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Rectangle x:Name="GelBackground" Style="{StaticResource IGelQWERTYRectangleTemplate}" Fill="{TemplateBinding Background}" >
                        </Rectangle>
                        <ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="GelBackground" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="GelBackground" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="EButtonStyle1" TargetType="{x:Type ButtonBase}">
		<!-- BasedOn="{StaticResource EButtonFonts}"-->
		<Setter Property="Margin" Value="{DynamicResource EButtonMargin1}"/>
		<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="Background" Value="{DynamicResource EButtonBackground1}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="10,5,10,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
						<Rectangle x:Name="GelBackground" Style="{StaticResource IGelRectangleTemplate}" Fill="{TemplateBinding Background}" Effect="{StaticResource IButtonShadowEffect}">
						</Rectangle>
						<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="EButtonStylethumbnails" TargetType="{x:Type ButtonBase}">
		<!-- BasedOn="{StaticResource EButtonFonts}"-->
		<Setter Property="Background" Value="{DynamicResource EThumbnailsButtonBackground1}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="10,5,10,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
						<Ellipse Width="25" Height="25" x:Name="GelBackground"  Fill="{DynamicResource EThumbnailsButtonBackground1}" >
						</Ellipse>
						<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EThumbnailsButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EThumbnailsButtonMouseHoverBackground1}"/>
							<Setter Property="Foreground" Value="{DynamicResource EThumbnailsButtonMouseHoverBackground1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedBackground1}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
			</Trigger>
		   
			
		</Style.Triggers>
	</Style>



	<Style x:Key="EButtonStyleClip" TargetType="{x:Type ButtonBase}">
		<!-- BasedOn="{StaticResource EButtonFonts}"-->
		<Setter Property="Margin" Value="{DynamicResource EButtonMargin1}"/>
		<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="Background" Value="#ff0087fa"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="10,5,10,5" />
		<!--<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
						<Polygon Points="0,0 40,20, 0,40" Stroke="#ff0087fa"  x:Name="GelBackground"  Fill="{TemplateBinding Background}" Effect="{StaticResource IButtonShadowEffect}">
						</Polygon>
						<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>-->
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="#ff0087fa"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter Property="Background" Value="#ff0087fa"/>
			</Trigger>
				<!--<DataTrigger Binding="{Binding Path=IsChildButton,  RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
					<Setter Property="TextBlock.Foreground" Value="Black"/>
				</DataTrigger>-->
			</Style.Triggers>
	</Style>

	<!--<ControlTemplate x:Key="PlayClipTemplate" TargetType="{x:Type ButtonBase}">
		<Grid>
			<Polygon Points="0,0 40,20, 0,40" Stroke="#ff0087fa"  x:Name="GelBackground"  Fill="{TemplateBinding Background}" Effect="{StaticResource IButtonShadowEffect}">
			</Polygon>
			<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
		</Grid>
	</ControlTemplate>
	
	<ControlTemplate x:Key="PauseClipTemplate" TargetType="{x:Type ButtonBase}">
		<Grid>
			<Polygon Points="0,0 20,20, 0,20" Stroke="#ff0087fa"  x:Name="GelBackground"  Fill="{TemplateBinding Background}" Effect="{StaticResource IButtonShadowEffect}">
			</Polygon>
			<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
		</Grid>
	</ControlTemplate>-->


	<Style x:Key="EButtonStyle2" TargetType="{x:Type ButtonBase}">
		<!-- BasedOn="{StaticResource EButtonFonts}"-->
		<Setter Property="Margin" Value="{DynamicResource EButtonMargin1}"/>
		<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="Background" Value="{DynamicResource EButtonBackground4}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="10,5,10,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
						<Rectangle x:Name="GelBackground" Style="{StaticResource IGelRectangleTemplate}" Fill="{TemplateBinding Background}">
						</Rectangle>
						<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<!--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-->

	<Style x:Key="TSButtonStyleCommon" TargetType="{x:Type contract:TSButton}">
		<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="Background" Value="{DynamicResource EButtonBackground1}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
			</Trigger>
			<!-- Toggling management -->
			<Trigger Property="IsChecked" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
				<Setter Property="Background" Value="{DynamicResource EButtonPressedBackground1}"/>
			</Trigger>
			<!-- +++++++++++++++++++ -->
		</Style.Triggers>
	</Style>

	<!--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-->

	<Style x:Key="TSButtonStyleBasic" TargetType="{x:Type contract:TSButton}" BasedOn="{StaticResource TSButtonStyleCommon}">
		<Setter Property="Margin" Value="{DynamicResource EButtonMargin1}"/>
		<Setter Property="Padding" Value="10,5,10,5" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
						<Rectangle x:Name="GelBackground" Style="{StaticResource IGelRectangleTemplate}" Fill="{TemplateBinding Background}" Effect="{StaticResource IButtonShadowEffect}">
						</Rectangle>
						<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-->

	<Style x:Key="TSButtonStyleMeasure" TargetType="{x:Type contract:TSButton}" BasedOn="{StaticResource TSButtonStyleCommon}">
		<Setter Property="Margin"  Value="2,2,2,2"/>
		<Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="Background"  Value="{DynamicResource EMeasureButtonColor}"/>
		<Setter Property="Template">
			<Setter.Value>
                <ControlTemplate TargetType="{x:Type contract:TSButton}">
					<Grid>
                      
						<Rectangle x:Name="GelBackground" Style="{StaticResource IGelRectangleTemplate}" Fill="{TemplateBinding Background}">
                            </Rectangle>
                        <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EMeasureButtonColor}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="GelBackground" Property="Stroke" Value="{DynamicResource EButtonPressedForeground1}"/>
                            <Setter TargetName="GelBackground" Property="StrokeThickness" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
            
		</Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
                <Setter Property="Background" Value="{DynamicResource EMeasureButtonColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

	<!--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-->

	<Style x:Key="TSButtonStyleEncoder" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource ETouchScreenEncoderBackground1}"/>
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
						<Border Margin="{TemplateBinding Padding}" CornerRadius="{DynamicResource ETouchScreenEncoderCornerRadius1}" Background="{TemplateBinding Background}">
							<ContentPresenter  Margin="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" x:Name="contentPresenter" OpacityMask="#FF000000"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource ETouchScreenEncoderMouseOverBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-->

	<Style x:Key="TSButtonStyleEncoderMeasure" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ETouchScreenEncoderBackground1}" />
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="1,1,1,1"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
                        <Border Margin="{TemplateBinding Padding}" CornerRadius="{DynamicResource ETouchScreenEncoderCornerRadius1}"  Background="{TemplateBinding Background}">
							<ContentPresenter  Margin="1" VerticalAlignment="Center" HorizontalAlignment="Stretch" x:Name="contentPresenter" />
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource ETouchScreenEncoderMouseOverBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!--xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-->

	<Style x:Key="EQwertyToggleButtonStyle1" TargetType="Button">
		<Setter Property="Background" Value="{DynamicResource EQwertyKeybButtonColor}" />
		<Style.Triggers>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource EQwertyKeybButtonColor}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- for Touchscreen on Main screen buttons-->
	<Style x:Key="ETSKeyButtonStyle1" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource EButtonStyle1}">
		<Setter Property="Margin" Value="2"/>
		<!-- teniamo il margine fisso, tanto è solo per il desktop {DynamicResource EStandardMargin}-->
	</Style>


	<!-- used for multitab central page-->
	<Style x:Key="EButtonStyle3" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource EButtonStyle1}"/>
	<Style x:Key="EButtonStyle4" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource EButtonStyleClip}"/>
    <Style x:Key="EButtonStyle5" TargetType="{x:Type ButtonBase}" BasedOn="{StaticResource EButtonStyle1}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Padding" Value="0,0,0,0" />
    </Style>

    <Style x:Key="ESpecialToggleButtonStyle2" TargetType="{x:Type contract:TSButton}"  BasedOn="{StaticResource TSButtonStyleBasic}"/>

	<Style x:Key="EToggleButtonStyle1" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource EButtonStyle1}">
		<!--<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<Rectangle x:Name="GelBackground" Style="{StaticResource IGelRectangleTemplate}" Fill="{TemplateBinding Background}" Effect="{StaticResource IButtonShadowEffect}"  />
						<ContentPresenter  Margin="10,5,10,5" VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="contentPresenter" OpacityMask="#FF000000"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1Archive}"/>
							<!--<Setter Property="Fill" TargetName="GelShine" Value="{DynamicResource EButtonShinePressedFillBrush1}"/>-->
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1Archive}"/>
							<!--<Setter Property="Fill" TargetName="GelShine" Value="{DynamicResource EButtonShinePressedFillBrush1}"/>-->
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="EEditableToggleButtonStyle1" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource EToggleButtonStyle1}">
		<!--<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<Rectangle x:Name="GelBackground" Style="{StaticResource IGelRectangleTemplate}" Fill="{TemplateBinding Background}" Effect="{StaticResource IButtonShadowEffect}" />
						<TextBox Visibility="Hidden" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, Path=Content}" Style="{DynamicResource ETextBoxStyle1}" HorizontalAlignment="Center" Margin="10,5,10,5" x:Name="EditableHeaderContent" VerticalAlignment="Center" />
						<TextBlock Visibility="Visible" Text="{TemplateBinding Content}" HorizontalAlignment="Center" Margin="10,5,10,5" x:Name="HeaderContent" TextWrapping="Wrap" VerticalAlignment="Center" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Visibility" Value="Visible" TargetName="EditableHeaderContent"/>
							<Setter Property="Visibility" Value="Hidden" TargetName="HeaderContent"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="False">
							<Setter Property="Visibility" Value="Hidden" TargetName="EditableHeaderContent"/>
							<Setter Property="Visibility" Value="Visible" TargetName="HeaderContent"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- textbox-->
	<Style x:Key="ETextBoxStyleCustomWorksheet" TargetType="{x:Type TextBox}" BasedOn="{StaticResource ETextBoxFonts}">
		<Setter Property="Background" Value="{DynamicResource EEditableAreaBrush1}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}"/>
		<Setter Property="Foreground" Value="{DynamicResource EEditableTextBrush1}"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<!--<Setter Property="Padding" Value="5"/>-->
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="Cursor" Value="IBeam"/>
		<Setter Property="TextWrapping" Value="Wrap"/>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="{DynamicResource EDisabledEditableAreaBrush1}"/>
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
			</Trigger>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="Background" Value="{DynamicResource EDisabledEditableAreaBrush1}"/>
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
			</Trigger>
		</Style.Triggers>
		<!-- eventualmente focusvisualstyle per evidenziare il bordo quando ha il focus-->
	</Style>

	<Style x:Key="ETextBoxStyle1" TargetType="{x:Type TextBox}" BasedOn="{StaticResource ETextBoxFonts}">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="Background" Value="{DynamicResource EEditableAreaBrush1}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}"/>
		<Setter Property="Foreground" Value="{DynamicResource EEditableTextBrush1}"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<!--<Setter Property="Padding" Value="5"/>-->
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="Cursor" Value="IBeam"/>
		<Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="ContextMenu">
            <Setter.Value>
                <ContextMenu>
                    <MenuItem Command="Cut"/>
                    <MenuItem Command="Copy"/>
                    <MenuItem Command="Paste"/>
                </ContextMenu>
            </Setter.Value>
        </Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border SnapsToDevicePixels="true" x:Name="EditBorder" Background="{TemplateBinding Background}" 
				  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
				  CornerRadius="{DynamicResource EControlCornerRadius1}">
						<ScrollViewer Style="{DynamicResource EScrollViewerStyle1}" 
						  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						  x:Name="PART_ContentHost" 
						 VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
						  MinHeight="{DynamicResource MinControlHeight1}" 
						  MinWidth="10"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource EHighlightedItemBackgroundBrush1}" TargetName="EditBorder" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="{DynamicResource EDisabledEditableAreaBrush1}"/>
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
			</Trigger>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="Background" Value="{DynamicResource EDisabledEditableAreaBrush1}"/>
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
			</Trigger>
		</Style.Triggers>
		<!-- eventualmente focusvisualstyle per evidenziare il bordo quando ha il focus-->
	</Style>
	<Style x:Key="ETextBoxStyle2" TargetType="{x:Type TextBox}" BasedOn="{StaticResource ETextBoxFonts}">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="Background" Value="{DynamicResource EEditableAreaBrush1}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}"/>
		<Setter Property="Foreground" Value="{DynamicResource EEditableTextBrush1}"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<!--<Setter Property="Padding" Value="5"/>-->
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="Cursor" Value="IBeam"/>
		<Setter Property="TextWrapping" Value="Wrap"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border SnapsToDevicePixels="true" x:Name="EditBorder" Background="{TemplateBinding Background}" 
				  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
				  CornerRadius="{DynamicResource EControlCornerRadius1}">
						<ScrollViewer Style="{DynamicResource EScrollViewerStyle1}" 
						  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
						  x:Name="PART_ContentHost" 
						 VerticalScrollBarVisibility="{TemplateBinding VerticalScrollBarVisibility}"
						  MinHeight="{DynamicResource MinControlHeight1}" 
						  MinWidth="10"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="BorderBrush" Value="{DynamicResource EHighlightedItemBackgroundBrush1}" TargetName="EditBorder" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background" Value="{DynamicResource EDisabledEditableAreaBrush1}"/>
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush3}"/>
			</Trigger>
			<Trigger Property="IsReadOnly" Value="True">
				<Setter Property="Background" Value="{DynamicResource EDisabledEditableAreaBrush1}"/>
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush3}"/>
			</Trigger>
		</Style.Triggers>
		<!-- eventualmente focusvisualstyle per evidenziare il bordo quando ha il focus-->
	</Style>

	<Style x:Key="ENumericTextBoxStyle1" TargetType="{x:Type CommonControls:NumericTextBox}" BasedOn="{StaticResource ETextBoxStyle1}"   />
	<Style x:Key="ETimeItemTextBoxStyle1" TargetType="{x:Type CommonControls:TimeItemTextBox}" BasedOn="{StaticResource ETextBoxStyle1}" />

	<Style x:Key="EPatientDataTextBoxStyle1" TargetType="{x:Type CommonControls:PatientDataTextBox}" BasedOn="{StaticResource ETextBoxStyle1}">
		<Setter Property="TextWrapping" Value="NoWrap"/>
	</Style>
	<Style x:Key="EPatientDataTextBoxStyle2" TargetType="{x:Type CommonControls:PatientDataTextBox}" BasedOn="{StaticResource ETextBoxStyle2}">
		<Setter Property="TextWrapping" Value="NoWrap"/>
	</Style>

	<Style x:Key="EStandardAsciiTextBoxStyle1" TargetType="{x:Type CommonControls:StandardAsciiTextBox}" BasedOn="{StaticResource ETextBoxStyle1}" />

	<Style x:Key="EPatientData_AdmDiag_TextBoxStyle1" TargetType="{x:Type CommonControls:PatientData_AdmDiag_TextBox}" BasedOn="{StaticResource ETextBoxStyle1}">
		<Setter Property="TextWrapping" Value="NoWrap"/>
	</Style>

	<Style x:Key="EPatientData_TextBox_NoSlashStyle1" TargetType="{x:Type CommonControls:PatientData_TextBox_NoSlash}" BasedOn="{StaticResource ETextBoxStyle1}">
		<Setter Property="TextWrapping" Value="NoWrap"/>
	</Style>

	<Style x:Key="IEditableTabItemTextBoxStyle1" TargetType="{x:Type TextBox}" BasedOn="{StaticResource ETextBoxStyle1}">
		<Setter Property="TextBlock.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="TextBlock.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_ETouchScreenTabFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>


	<!-- label-->
   
    <Style x:Key="ELabelStyle1" TargetType="{x:Type Label}">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="Foreground" Value="{DynamicResource ELabelTextBrush1}"/>
		<Setter Property="Background" Value="{DynamicResource ELabelBackgroundBrush1}"/>
		<Setter Property="Padding" Value="4,0,4,0"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<Border x:Name="LabelBorder" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" 
				  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
				  Padding="{TemplateBinding Padding}" 
				  CornerRadius="{DynamicResource EControlCornerRadius1}">
						<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
							  RecognizesAccessKey="False"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ELabelStyle2" TargetType="{x:Type Label}" BasedOn="{StaticResource ELabelStyle1}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource ELabelStyle2FontWeight}"/>
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource ELabelTextBrush2}"/>
		<Style.Resources>
			<Style TargetType="TextBlock" BasedOn="{StaticResource ELabelStyle2Fonts}" />
			<DataTemplate DataType="{x:Type System:String}">
				<TextBlock Text="{Binding}">
                    <TextBlock.Resources>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ELabelStyle2Fonts}" >
                            <Style.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Resources>
                </TextBlock>
			</DataTemplate>
		</Style.Resources>
	</Style>
    <Style x:Key="ELabelStyle4" TargetType="{x:Type Label}">
        <Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
        <Setter Property="Foreground" Value="{DynamicResource ELabelTextBrush1}"/>
        <Setter Property="Background" Value="{DynamicResource ELabelBackgroundBrush1}"/>
        <Setter Property="Padding" Value="4,0,4,0"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border x:Name="LabelBorder" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" 
				  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
				  Padding="{TemplateBinding Padding}" 
				  CornerRadius="{DynamicResource EControlCornerRadius1}">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
							  RecognizesAccessKey="False"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ELabelStyle8" TargetType="{x:Type Label}" BasedOn="{StaticResource ELabelStyle1}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TextBlock.FontWeight" Value="{DynamicResource ELabelStyle2FontWeight}"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ELabelTextBrush2}"/>
        <Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource ELabelStyle2Fonts}" />
            <DataTemplate DataType="{x:Type System:String}">
                <TextBlock Text="{Binding}">
                    <TextBlock.Resources>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ELabelStyle2Fonts}">
                            <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
                        </Style>
                    </TextBlock.Resources>
                </TextBlock>
            </DataTemplate>
        </Style.Resources>
    </Style>

    <Style x:Key="ESummaryLabelStyleQElaxto2d" TargetType="{x:Type Label}" BasedOn="{StaticResource ELabelStyle1}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TextBlock.FontWeight" Value="{DynamicResource ELabelStyle2FontWeight}"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource ELabelTextBrush2}"/>
        <Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource ELabelStyleQElaxto2d}" />
            <DataTemplate DataType="{x:Type System:String}">
                <TextBlock Text="{Binding}">
                    <TextBlock.Resources>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ELabelStyleQElaxto2d}" />
                    </TextBlock.Resources>
                </TextBlock>
            </DataTemplate>
        </Style.Resources>
    </Style>

    <Style x:Key="ELabelStyleActiveobj" TargetType="{x:Type Label}" BasedOn="{StaticResource ELabelStyle1}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="TextBlock.FontWeight" Value="{DynamicResource ELabelStyle2FontWeight}"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource EActiveObjectColor}"/>
        <Style.Resources>
            <Style TargetType="TextBlock" BasedOn="{StaticResource ELabelStyle2FontsActiveObj}" />
            <DataTemplate DataType="{x:Type System:String}">
                <TextBlock Text="{Binding}">
                    <TextBlock.Resources>
                        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource ELabelStyle2FontsActiveObj}" />
                    </TextBlock.Resources>
                </TextBlock>
            </DataTemplate>
        </Style.Resources>
    </Style>
    
    <Style x:Key="ELabelStyle3" TargetType="{x:Type Label}">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="Foreground" Value="{DynamicResource ELabelTextBrush1}"/>
		<Setter Property="Background" Value="{DynamicResource ELabelBackgroundBrush1}"/>
		<Setter Property="Padding" Value="4,0,4,0"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border x:Name="LabelBorder" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" 
				  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
				  Padding="{TemplateBinding Padding}" 
				  CornerRadius="{DynamicResource EControlCornerRadius1}">
                        <ContentPresenter
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
							  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
							  RecognizesAccessKey="False">
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
			<DataTrigger Binding="{Binding Path=IsSelected,  RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True">
				<Setter Property="TextBlock.Foreground" Value="White"/>
			</DataTrigger>
			<DataTrigger Binding="{Binding Path=IsMouseOver,  RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True">
				<Setter Property="TextBlock.Foreground" Value="White"/>
			</DataTrigger>
			<!--<DataTrigger Binding="{Binding Path=IsSelected,  RelativeSource={RelativeSource AncestorType=ListViewItem}}" Value="True>
								<Setter Property="TextBlock.Foreground" Value="Black"/>
			</-->
		</Style.Triggers>
	  
	</Style>

	<Style x:Key="ECustomMeasureLabelStyle2" TargetType="{x:Type Label}" BasedOn="{StaticResource ELabelStyle2}">
		<Setter Property="TextBlock.FontStyle" Value="Italic"/>
		<Setter Property="TextBlock.FontFamily" Value="Verdana"/>
	</Style>

	<Style x:Key="EErrorBoxLabelStyle" TargetType="{x:Type Label}"  BasedOn="{StaticResource ELabelStyle1}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
		<Setter Property="TextBlock.TextAlignment" Value="Center"/>
	</Style>

    <Style x:Key="EServiceMsgBoxTitleStyle" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
        <Setter Property="TextBlock.TextAlignment" Value="Center"/>
        <Setter Property="TextBlock.Foreground" Value="Yellow"/>
        <!--<Setter Property="TextBlock.FontWeight" Value="Bold"/>
        <Setter Property="TextBlock.FontSize" Value="25"/>
        <Setter Property="TextBlock.FontFamily" Value="Verdana" />-->
    </Style>


    <Style x:Key="EQwertyLabelStyle" TargetType="{x:Type Label}" >
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
		<Setter Property="TextBlock.TextAlignment" Value="Center"/>
		<Setter Property="TextBlock.FontWeight" Value="Bold"/>
		<Setter Property="TextBlock.FontSize" Value="25"/>
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource EQwertyKeybLetterColor}" />
		<Setter Property="TextBlock.FontFamily" Value="Verdana" />
	</Style>

	<Style x:Key="ELockedLabelStyle" TargetType="{x:Type Label}" >
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
		<Setter Property="TextBlock.TextAlignment" Value="Center"/>
		<Setter Property="TextBlock.FontWeight" Value="Bold"/>
		<Setter Property="TextBlock.FontSize" Value="50"/>
		<Setter Property="TextBlock.Foreground" Value="{DynamicResource EQwertyKeybLetterColor}" />
		<Setter Property="TextBlock.FontFamily" Value="Verdana" />
	</Style>

	<!-- progress bar -->
	<Style x:Key="EProgressBarStyle1" TargetType="{x:Type ProgressBar}">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<Grid>

						<!-- This Border is the track. It must be named PART_Track il background era come ECheckboxPressedBrush (4 scale di grigio) ma non si vede la differenza-->
						<Border CornerRadius="{DynamicResource EControlCornerRadius1}" 
					x:Name="PART_Track" 
					Background="{DynamicResource EControlAreaBackGroundBrush1}" 
					BorderBrush="{DynamicResource EControlAreaBorderBrush1}" 
					BorderThickness="1"/>

						<!-- This Border shows progress. It must be named PART_Indicator for the control to function -->
						<Border CornerRadius="{DynamicResource EControlCornerRadius1}" 
					HorizontalAlignment="Left" x:Name="PART_Indicator" 
					Background="{DynamicResource EProgressBrush1}" 
					BorderBrush="{DynamicResource EControlAreaBorderBrush1}" 
					BorderThickness="1"/>

					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- checkbox-->
	<!-- dà una cornicina grigia intorno alla label-->
	<Style x:Key="ICheckBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Border>
						<Rectangle Margin="15,0,0,0" Stroke="#60000000" StrokeThickness="1" StrokeDashArray="1 2"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="ECheckBoxStyle1" TargetType="{x:Type CheckBox}">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<!-- provare a commentarlo-->
		<Setter Property="FocusVisualStyle" Value="{DynamicResource ICheckBoxFocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource EControlAreaBackGroundBrush1}"/>
		<Setter Property="Foreground" Value="{DynamicResource ELabelTextBrush1}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource EControlAreaBorderBrush1}"/>
		<!-- alignment e padding are for contentpresenter-->
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator Margin="0,0,0,0">
						<BulletDecorator.Bullet>
							<Grid Width="13" Height="13" HorizontalAlignment="Left">
								<Border x:Name="Border" 
						CornerRadius="{DynamicResource ECheckboxCornerRadius1}"
						Background="{TemplateBinding Background}" 
						BorderBrush="{TemplateBinding BorderBrush}" 
						BorderThickness="{TemplateBinding BorderThickness}"/>
								<Canvas HorizontalAlignment="Left" VerticalAlignment="Top" Width="13" Height="13">
									<Path x:Name="CheckMark" Width="Auto" Height="Auto" StrokeThickness="2"  Fill="Transparent" Stretch="Fill" 
						Stroke="{DynamicResource ECheckboxMarkBrush1}" 
						Data="M8.6669962,0.49999999 C3.4997738,8.3335453 3.4997738,7.6668885 3.4997738,7.6668885 L0.5,3.0003282" 
						Margin="1,1,1,1" Canvas.Left="0" Canvas.Top="0" 
						HorizontalAlignment="Center"/>
								</Canvas>
							</Grid>
						</BulletDecorator.Bullet>
						<!-- label-->
						<Border CornerRadius="{DynamicResource EControlCornerRadius1}" Background="{DynamicResource ELabelBackgroundBrush1}" Margin="5,0,0,0" Padding="5,0,5,0" Width="Auto" HorizontalAlignment="Stretch">
							<ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="False"/>
						</Border>
					</BulletDecorator>

					<!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource ECheckboxMouseOverBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource ECheckboxPressedBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource ECheckboxPressedBorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <Style x:Key="ECheckBoxStyle2" TargetType="{x:Type CheckBox}">
        <Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <!-- provare a commentarlo-->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ICheckBoxFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource EControlAreaBackGroundBrush1}"/>
        <Setter Property="Foreground" Value="{DynamicResource ELabelTextBrush1}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource EControlAreaBorderBrush1}"/>
        <!-- alignment e padding are for contentpresenter-->
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <BulletDecorator Margin="0,0,0,0">
                        <BulletDecorator.Bullet>
                            <Grid Width="18" Height="18" HorizontalAlignment="Left">
                                <Border x:Name="Border" 
						CornerRadius="{DynamicResource ECheckboxCornerRadius1}"
						Background="{TemplateBinding Background}" 
						BorderBrush="{TemplateBinding BorderBrush}" 
						BorderThickness="{TemplateBinding BorderThickness}"/>
                                <Canvas HorizontalAlignment="Left" VerticalAlignment="Top" Width="18" Height="18">
                                    <Path x:Name="CheckMark" Width="16" Height="16" StrokeThickness="3"  Fill="Transparent" Stretch="Fill" 
						Stroke="{DynamicResource ECheckboxMarkBrush1}" 
						Data="M8.6669962,0.49999999 C3.4997738,8.3335453 3.4997738,7.6668885 3.4997738,7.6668885 L0.5,3.0003282" 
						Margin="1,1,1,1" Canvas.Left="0" Canvas.Top="0" 
						HorizontalAlignment="Center"/>
                                </Canvas>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <!-- label-->
                        <Border CornerRadius="{DynamicResource EControlCornerRadius1}" Background="{DynamicResource ELabelBackgroundBrush1}" Margin="5,0,0,0" Padding="5,0,5,0" Width="Auto" HorizontalAlignment="Stretch">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="False"/>
                        </Border>
                    </BulletDecorator>

                    <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                        </Trigger>
                      
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type RadioButton}">
		<!--x:Key="SimpleRadioButton"-->
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource ICheckBoxFocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource EControlAreaBackGroundBrush1}"/>
		<Setter Property="Foreground" Value="{DynamicResource ELabelTextBrush1}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource EControlAreaBorderBrush1}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">

					<!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
					<BulletDecorator VerticalAlignment="Center" Background="Transparent">
						<BulletDecorator.Bullet>
							<Grid Width="13" Height="13">
								<Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
								<Ellipse Margin="4" x:Name="CheckMark" Fill="{DynamicResource ECheckboxMarkBrush1}"/>
							</Grid>
						</BulletDecorator.Bullet>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="4,2,2,2" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="False"/>
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" Value="{DynamicResource ECheckboxMouseOverBrush}" TargetName="Ellipse_Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" Value="{DynamicResource ECheckboxPressedBackgroundBrush}" TargetName="Ellipse_Border"/>
							<Setter Property="Stroke" Value="{DynamicResource ECheckboxPressedBorderBrush}" TargetName="Ellipse_Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="Ellipse_Border"/>
							<Setter Property="Stroke" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="Ellipse_Border"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!-- style for button-like radio buttons-->
	<Style TargetType="{x:Type RadioButton}" x:Key="ERadioButtonStyle2" >
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="AccessText.Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="AccessText.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="AccessText.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<Setter Property="Focusable" Value="False" />
		<!--<Setter Property="GroupName" Value="filter"/>-->
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Border x:Name="PART_border" CornerRadius="{DynamicResource EControlCornerRadius1}" Padding="3px" Margin="{DynamicResource EStandardMargin}" Background="{DynamicResource EButtonBackground1}" BorderThickness="1" BorderBrush="{DynamicResource EControlBorderBrush1}" SnapsToDevicePixels="True">
						<ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"  x:Name="PART_content" />
					</Border>
					<ControlTemplate.Triggers>

						<Trigger Property="IsVisible" Value="True">
							<Setter Property="AccessText.FontSize">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EEditFontSize1}">
										<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
										<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" TargetName="PART_border" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="PART_border" Property="Background" Value="{DynamicResource EButtonPressedBackground1}" />
							<Setter Property="AccessText.Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" TargetName="PART_border" Value="{DynamicResource EButtonPressedBackground1}"/>
							<Setter Property="AccessText.Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" TargetName="PART_border" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="AccessText.Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- checkbox con label trasparente per exam list-->
	<Style x:Key="ECheckBoxStyleNoLabel1" TargetType="{x:Type CheckBox}">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<!-- provare a commentarlo-->
		<Setter Property="FocusVisualStyle" Value="{DynamicResource ICheckBoxFocusVisual}"/>
		<Setter Property="Background" Value="{DynamicResource EControlAreaBackGroundBrush1}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource EControlAreaBorderBrush1}"/>
		<!-- alignment e padding are for contentpresenter-->
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Margin" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid>
						<Grid HorizontalAlignment="Left" MaxHeight="19" MaxWidth="19">
							<Border x:Name="Border" 
						CornerRadius="{DynamicResource ECheckboxCornerRadius1}"
						Background="{TemplateBinding Background}" 
						BorderBrush="{TemplateBinding BorderBrush}" 
						BorderThickness="{TemplateBinding BorderThickness}"/>
                            <Viewbox MaxHeight="19" MaxWidth="19" HorizontalAlignment="Left" VerticalAlignment="Top">
								<Canvas Width="19" Height="19">
									<Path x:Name="CheckMark" Width="Auto" Height="Auto" StrokeThickness="3"  Fill="Transparent" Stretch="Fill" 
						Stroke="{DynamicResource ECheckboxMarkBrush1}" 
						Data="M14.6669962,0.49999999 C3.4997738,14.3335453 3.4997738,13.6668885 3.4997738,13.6668885 L0.5,3.0003282" 
						Margin="1,1,1,1" Canvas.Left="0" Canvas.Top="0" 
						HorizontalAlignment="Center"/>
								</Canvas>
							</Viewbox>
						</Grid>
					</Grid>
					<!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="false">
							<Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="{x:Null}">
							<Setter Property="Data" Value="M0,0 L13,0 L13,13 L0,13" TargetName="CheckMark"/>
							<Setter Property="Stroke" Value="Transparent" TargetName="CheckMark"/>
							<Setter Property="Fill" Value="{DynamicResource ECheckboxMarkBrush1}" TargetName="CheckMark"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Background" Value="{DynamicResource ECheckboxMouseOverBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Background" Value="{DynamicResource ECheckboxPressedBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource ECheckboxPressedBorderBrush}" TargetName="Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="Border"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    <!-- checkbox con label trasparente per exam list-->
    <Style x:Key="ECheckBoxStyleNoLabel2" TargetType="{x:Type CheckBox}">
        <Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <!-- provare a commentarlo-->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource ICheckBoxFocusVisual}"/>
        <Setter Property="Background" Value="{DynamicResource EControlAreaBackGroundBrush1}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource EControlAreaBorderBrush1}"/>
        <!-- alignment e padding are for contentpresenter-->
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Grid HorizontalAlignment="Left" MaxHeight="19" MaxWidth="19">
                            <Border x:Name="Border" 
						CornerRadius="{DynamicResource ECheckboxCornerRadius1}"
						Background="Transparent" 
						BorderBrush="Transparent" 
						BorderThickness="{TemplateBinding BorderThickness}"/>
                            <Viewbox MaxHeight="19" MaxWidth="19" HorizontalAlignment="Left" VerticalAlignment="Top">
                                <Canvas Width="19" Height="19">
                                    <Path x:Name="CheckMark" Width="Auto" Height="Auto" StrokeThickness="6"  Fill="{DynamicResource ECheckboxMarkBrush1}"  
						Data="M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M12 20C7.59 20 4 16.41 4 12S7.59 4 12 4 20 7.59 20 12 16.41 20 12 20M16.59 7.58L10 14.17L7.41 11.59L6 13L10 17L18 9L16.59 7.58Z" 
						Margin="1,1,1,1" Canvas.Left="0" Canvas.Top="0" 
						HorizontalAlignment="Center"/>
                                </Canvas>
                            </Viewbox>
                        </Grid>
                    </Grid>
                    <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Data" Value="M0,0 L13,0 L13,13 L0,13" TargetName="CheckMark"/>
                            <Setter Property="Stroke" Value="Transparent" TargetName="CheckMark"/>
                            <Setter Property="Fill" Value="{DynamicResource ECheckboxMarkBrush1}" TargetName="CheckMark"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ECheckboxMouseOverBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource ECheckboxPressedBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource ECheckboxPressedBorderBrush}" TargetName="Border"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ContextMenu arrows and text color-->
	<SolidColorBrush x:Key="{x:Static SystemColors.MenuTextBrushKey}" Color="{DynamicResource EFocusedItemTextColor1}"/>
	<Style TargetType="{x:Type ContextMenu}">
		<!--EContextMenuStyle1-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Border Grid.Row="1" Grid.Column="0" x:Name="Border" 
					Background="{DynamicResource EPanelBackgroundBrush1}" 
					BorderBrush="{DynamicResource EControlBorderBrush1}" 
					BorderThickness="1" CornerRadius="{DynamicResource EControlCornerRadius1}" 
					>
						<Grid>
							<ScrollViewer Margin="1,0,1,0" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly=FrameworkElement}}" CanContentScroll="True">
								<ScrollViewer.Resources>
									<Style TargetType="{x:Type RepeatButton}">
										<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}" />
									</Style>
								</ScrollViewer.Resources>
								<ItemsPresenter ScrollViewer.VerticalScrollBarVisibility="Auto" KeyboardNavigation.DirectionalNavigation="Cycle" />
							</ScrollViewer>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- Tab control-->
	<Style x:Key="ETabControlStyle1" TargetType="{x:Type TabControl}">
		<Setter Property="Background" Value="{DynamicResource EPanelBackgroundBrush1}" />
		<!--<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid KeyboardNavigation.TabNavigation="Local">
						<Grid.RowDefinitions>
							<RowDefinition Name="GridRow0" Height="Auto"/>
							<RowDefinition Name="GridRow1" Height="*"/>
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Name="GridCol0" Width="Auto"/>
							<ColumnDefinition Name="GridCol1" Width="*"/>
						</Grid.ColumnDefinitions>

						<!-- TabPanel is a layout container which allows the TabItems to wrap and re-order when selected
						The implementation knows to use this control because it is marked IsItemsHost = True -->
						<TabPanel Grid.Row="0" Grid.Column="0"  Margin="0,0,4,-1" x:Name="HeaderPanel" Background="Transparent" IsItemsHost="True" Panel.ZIndex="1" KeyboardNavigation.TabIndex="1"/>

						<Border Grid.Row="1" Grid.Column="0" x:Name="Border" 
					Background="{TemplateBinding Background}" 
					BorderBrush="{DynamicResource EControlBorderBrush1}" 
					BorderThickness="1" CornerRadius="{DynamicResource EControlCornerRadius1}" 
					KeyboardNavigation.DirectionalNavigation="Contained" 
					KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.TabIndex="2">

							<!-- The implementation switches the content. This control must be named PART_SelectedContentHost -->
							<ContentPresenter Margin="4" x:Name="PART_SelectedContentHost" ContentSource="SelectedContent"/>

						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
							<Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="Border"/>
						</Trigger>

						<Trigger Property="TabStripPlacement" Value="Left">
							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0" />
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
							<Setter Property="Grid.Column" TargetName="Border" Value="1" />
							<Setter Property="Grid.Row" TargetName="Border" Value="0" />
							<Setter Property="RowDefinition.Height" TargetName="GridRow0" Value="*" />
							<Setter Property="RowDefinition.Height" TargetName="GridRow1" Value="Auto" />
							<Setter Property="ColumnDefinition.Width" TargetName="GridCol0" Value="Auto" />
							<Setter Property="ColumnDefinition.Width" TargetName="GridCol1" Value="*" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Right">
							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1" />
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
							<Setter Property="Grid.Column" TargetName="Border" Value="0" />
							<Setter Property="Grid.Row" TargetName="Border" Value="0" />
							<Setter Property="RowDefinition.Height" TargetName="GridRow0" Value="*" />
							<Setter Property="RowDefinition.Height" TargetName="GridRow1" Value="Auto" />
							<Setter Property="ColumnDefinition.Width" TargetName="GridCol0" Value="*" />
							<Setter Property="ColumnDefinition.Width" TargetName="GridCol1" Value="Auto" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Top">
							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0" />
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0" />
							<Setter Property="Grid.Column" TargetName="Border" Value="0" />
							<Setter Property="Grid.Row" TargetName="Border" Value="1" />
							<Setter Property="RowDefinition.Height" TargetName="GridRow0" Value="Auto" />
							<Setter Property="RowDefinition.Height" TargetName="GridRow1" Value="*" />
							<Setter Property="ColumnDefinition.Width" TargetName="GridCol0" Value="*" />
							<Setter Property="ColumnDefinition.Width" TargetName="GridCol1" Value="Auto" />
						</Trigger>
						<Trigger Property="TabStripPlacement" Value="Bottom">
							<Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0" />
							<Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1" />
							<Setter Property="Grid.Column" TargetName="Border" Value="0" />
							<Setter Property="Grid.Row" TargetName="Border" Value="0" />
							<Setter Property="RowDefinition.Height" TargetName="GridRow0" Value="*" />
							<Setter Property="RowDefinition.Height" TargetName="GridRow1" Value="Auto" />
							<Setter Property="ColumnDefinition.Width" TargetName="GridCol0" Value="*" />
							<Setter Property="ColumnDefinition.Width" TargetName="GridCol1" Value="Auto" />
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!--Simple TabItem -->
	<Style x:Key="ETabItemStyle1" TargetType="{x:Type TabItem}">
		<Setter Property="AccessText.Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="AccessText.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="AccessText.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid>
						<Border Margin="0,0,-4,0" x:Name="c_Border" 
					Background="{DynamicResource ETabItemBackgroundBrush1}" 
					BorderBrush="{DynamicResource EControlBorderBrush1}" 
					BorderThickness="1,1,1,1" >
							<!--CornerRadius="{StaticResource ETabItemCornerRadius1}"-->
							<ContentPresenter Visibility="Visible"   ContentSource="Header" HorizontalAlignment="Center" Margin="12,2,12,2" x:Name="HeaderContent" VerticalAlignment="Center" RecognizesAccessKey="False" />
						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Panel.ZIndex" Value="100"/>
							<Setter Property="Background" Value="{DynamicResource ESelectedTabItemBackgroundBrush1}" TargetName="c_Border"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="c_Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="c_Border"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
						<Trigger Property="IsVisible" Value="True">
							<Setter Property="CornerRadius" TargetName="c_Border">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource CornerRadiusConverterInstance}"  ConverterParameter="ETabItemCornerRadius1" >
										<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}" Path="TabStripPlacement" />
										<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type UserControl}, AncestorLevel=1}"/>
									</MultiBinding>
								</Setter.Value>
							</Setter>
							<Setter Property="AccessText.FontSize">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_ETouchScreenTabFontSize1}">
										<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
										<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="Left" />
								<Condition Binding="{Binding Path=(local:AttachedStyleProperties.VerticalHeader), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="c_Border" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="270" />
								</Setter.Value>
							</Setter>
							<Setter Property="Margin" Value="0,0,-4,-4" TargetName="c_Border"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="Right" />
								<Condition Binding="{Binding Path=(local:AttachedStyleProperties.VerticalHeader), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="c_Border" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="90" />
								</Setter.Value>
							</Setter>
							<Setter Property="Margin" Value="0,0,-4,-4" TargetName="c_Border"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

	<!--  Style for TouchScreen tabItems (not using standard ETabItemStyle1 because they are not hosted by a tabcontrol so the ancestor for CornerRadius is not found-->
	<Style x:Key="ETSTabItemStyle1" TargetType="{x:Type TabItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid>
						<Border Margin="0,0,-4,0" x:Name="c_Border" 
					Background="{DynamicResource ETabItemBackgroundBrush1}" 
					BorderBrush="{DynamicResource EControlBorderBrush1}" 
					BorderThickness="1,1,1,0" 
					 CornerRadius="{DynamicResource ETabItemCornerRadius1}">
							<ContentPresenter Visibility="Visible"   ContentSource="Header" HorizontalAlignment="Center" Margin="5,2,5,2" x:Name="HeaderContent" VerticalAlignment="Center" RecognizesAccessKey="False" />
						</Border>
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Panel.ZIndex" Value="100"/>
							<Setter TargetName="c_Border" Property="Margin" Value="0,0,0,-1"/>
							<Setter  TargetName="c_Border" Property="BorderBrush" Value="{DynamicResource ETouchscreenTABBorderBrush}"/>
							<Setter  TargetName="c_Border" Property="BorderThickness" Value="2,2,2,0"/>
							<Setter   Property="Background" Value="{DynamicResource ETouchscreenAAreaBackground}" TargetName="c_Border"/>


						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Panel.ZIndex" Value="100"/>
							<Setter TargetName="c_Border" Property="Margin" Value="0,0,0,-1"/>
							<Setter  TargetName="c_Border" Property="BorderBrush" Value="{DynamicResource ETouchscreenTABBorderBrush}"/>
							<Setter  TargetName="c_Border" Property="BorderThickness" Value="2,2,2,0"/>
							<Setter   Property="Background" Value="{DynamicResource ETouchscreenAAreaBackground}" TargetName="c_Border"/>


						</Trigger>

						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="c_Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="c_Border"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>





	</Style>

    <Style x:Key="ETabItemStyle2" TargetType="{x:Type TabItem}">
        <Setter Property="AccessText.Foreground" Value="{DynamicResource EButtonForeground1}"/>
        <Setter Property="AccessText.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
        <Setter Property="AccessText.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <ContentPresenter Visibility="Visible"   ContentSource="Header" HorizontalAlignment="Center" Margin="12,2,12,2" x:Name="HeaderContent" VerticalAlignment="Center" RecognizesAccessKey="False" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
                        </Trigger>
                        <Trigger Property="IsVisible" Value="True">
                 
                            <Setter Property="AccessText.FontSize">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_ETouchScreenTabFontSize1}">
                                        <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
                                        <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="Left" />
                                <Condition Binding="{Binding Path=(local:AttachedStyleProperties.VerticalHeader), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                                                    </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="Right" />
                                <Condition Binding="{Binding Path=(local:AttachedStyleProperties.VerticalHeader), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                          
                        </MultiDataTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <SolidColorBrush x:Key="ETSTabSelectedBackground">#FFFFFFFF</SolidColorBrush>

    <Style x:Key="ETSTabItemStyle2" TargetType="{x:Type TabItem}">
        <Setter Property="AccessText.Foreground" Value="{DynamicResource EButtonForeground1}"/>
        <Setter Property="AccessText.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
        <Setter Property="AccessText.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>

        <Setter Property="Template">
            
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid>
                        <Border Margin="0,0,-4,0" x:Name="c_Border" 
					Background="{DynamicResource ETabItemBackgroundBrush1}" 
					BorderBrush="{DynamicResource EControlBorderBrush1}" 
					BorderThickness="1,1,1,0" 
					 CornerRadius="{DynamicResource ETabItemCornerRadius1}">
                            <!--<ContentPresenter Visibility="Visible"  ContentSource="Header" HorizontalAlignment="Center" Margin="2,2,2,2" x:Name="HeaderContent" VerticalAlignment="Center" RecognizesAccessKey="False">
                                <ContentPresenter.Resources>
                                    <Style TargetType="{x:Type TextBlock}" x:Key="WrappingStyle">
                                        <Setter Property="TextWrapping" Value="Wrap"/>
                                    </Style>
                                </ContentPresenter.Resources>
                            </ContentPresenter>-->
                                        <TextBlock Text="{Binding Label}" HorizontalAlignment="Center" TextWrapping="Wrap"  VerticalAlignment="Center" Margin="2,0,2,0"></TextBlock>
        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100"/>
                            <Setter TargetName="c_Border" Property="Margin" Value="0,0,0,-1"/>
                            <Setter  TargetName="c_Border" Property="BorderBrush" Value="{DynamicResource ETouchscreenTABBorderBrush}"/>
                            <Setter  TargetName="c_Border" Property="BorderThickness" Value="2,2,2,0"/>
                            <Setter   Property="Background" Value="{DynamicResource ETouchscreenAAreaBackground}" TargetName="c_Border"/>
                            <Setter Property="Foreground" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>


                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100"/>
                            <Setter TargetName="c_Border" Property="Margin" Value="0,0,0,-1"/>
                            <Setter  TargetName="c_Border" Property="BorderBrush" Value="{DynamicResource ETouchscreenTABBorderBrush}"/>
                            <Setter  TargetName="c_Border" Property="BorderThickness" Value="2,2,2,0"/>
                            <Setter   Property="Background" Value="{DynamicResource ETouchscreenAAreaBackground}" TargetName="c_Border"/>
                            <Setter Property="AccessText.Foreground" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>


                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="c_Border"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="c_Border"/>
                            <Setter Property="AccessText.Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>





    </Style>

    <Style x:Key="EEditableTabItemStyle1" TargetType="{x:Type TabItem}" BasedOn="{StaticResource ETabItemStyle1}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Border Margin="0,0,-4,0" x:Name="Border" 
					Background="{DynamicResource ETabItemBackgroundBrush1}" 
					BorderBrush="{DynamicResource EControlBorderBrush1}" 
					BorderThickness="1,1,1,1">
						<Grid>
							<TextBox Visibility="Hidden" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, Path=Header}" Style="{DynamicResource IEditableTabItemTextBoxStyle1}" HorizontalAlignment="Center" Margin="12,2,12,2" x:Name="EditableHeaderContent" VerticalAlignment="Center" />
							<TextBlock Visibility="Visible" Text="{TemplateBinding Header}" Style="{DynamicResource ETabHeader1}" HorizontalAlignment="Center" Margin="12,2,12,2" x:Name="HeaderContent" VerticalAlignment="Center"  />
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter Property="Panel.ZIndex" Value="100"/>
							<!--<Setter Property="Background" Value="{DynamicResource ESelectedTabItemBackgroundBrush1}" TargetName="Border"/>-->
							<Setter Property="BorderThickness" Value="1,1,1,0" TargetName="Border"/>

						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource EDisabledControlBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource EDisabledControlBorderBrush1}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Visibility" Value="Visible" TargetName="EditableHeaderContent"/>
							<Setter Property="Visibility" Value="Hidden" TargetName="HeaderContent"/>
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="False">
							<Setter Property="Visibility" Value="Hidden" TargetName="EditableHeaderContent"/>
							<Setter Property="Visibility" Value="Visible" TargetName="HeaderContent"/>
						</Trigger>
						<Trigger Property="Visibility" Value="Visible">
							<Setter Property="CornerRadius" TargetName="Border">
								<Setter.Value>
									<MultiBinding Converter="{StaticResource CornerRadiusConverterInstance}"  ConverterParameter="ETabItemCornerRadius1" >
										<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}" Path="TabStripPlacement" />
										<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type UserControl}, AncestorLevel=1}"/>
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</Trigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="Left" />
								<Condition Binding="{Binding Path=(local:AttachedStyleProperties.VerticalHeader), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="Border" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="270" />
								</Setter.Value>
							</Setter>
							<Setter Property="Margin" Value="0,0,-4,-4" TargetName="Border"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="Right" />
								<Condition Binding="{Binding Path=(local:AttachedStyleProperties.VerticalHeader), RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}, AncestorLevel=1}}" Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="Border" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="90" />
								</Setter.Value>
							</Setter>
							<Setter Property="Margin" Value="0,0,-4,-4" TargetName="Border"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

	<Style x:Key="EKeyboardButtonStyle" TargetType="{x:Type Button}" >
		<Setter Property="Margin" Value="1"/>
		<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="Background" Value="{DynamicResource EButtonBackground1}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle Name="GelBackground"  Panel.ZIndex="0" Opacity="1"    
							Fill="{TemplateBinding Background}" StrokeThickness="0.35"
			  Stroke="{TemplateBinding BorderBrush}" />
                        <Rectangle Margin="2" Fill="{DynamicResource EEllipseButtonShineFillBrush1}">
						</Rectangle>
						<ContentPresenter  Margin="10,5,10,5" VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="contentPresenter" OpacityMask="#FF000000"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonMouseHoverBackground1}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EDisabledControlBackgroundBrush}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EButtonPressedBackground1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonMouseOverForeground1}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="ETSBButtonsAreaBorder" TargetType="Border">
		<Setter Property="BorderBrush" Value="{DynamicResource ETouchscreenBAreaBorderBrush}"/>
		<Setter Property="BorderThickness" Value="2"/>
		<Setter Property="CornerRadius" Value="5"/>
		<Setter Property="Background" Value="{DynamicResource ETouchscreenBAreaBackground}"/>
		<Setter Property="Margin" Value="{DynamicResource ETouchscreenAreaMargin1}"/>
	</Style>
	<Style x:Key="ETSAButtonsAreaBorder" TargetType="Border">
		<Setter Property="BorderBrush" Value="{DynamicResource ETouchscreenAAreaBorderBrush}"/>
		<Setter Property="BorderThickness" Value="2"/>
		<Setter Property="CornerRadius" Value="5"/>
		<Setter Property="Background" Value="{DynamicResource ETouchscreenAAreaBackground}"/>
		<Setter Property="Margin" Value="{DynamicResource ETouchscreenAreaMargin1}"/>
	</Style>

	<Style x:Key="EModalWindowStyle" TargetType="{x:Type Window}">
		<Setter Property="AllowsTransparency" Value="True"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Window}">
					<Border BorderThickness="3" BorderBrush="{DynamicResource EControlBorderBrush1}" CornerRadius="{DynamicResource EControlCornerRadius1}" Background="{DynamicResource EUserControlBrush}" >
						<ContentPresenter/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- used by Examlistcontrol datatemplate EListViewColumnHeaderTemplateAscending-->
	<Style x:Key="EDownArrow1" TargetType="Path">
		<Setter Property="StrokeThickness" Value="1" />
		<Setter Property="Fill" Value="{DynamicResource EButtonForeground1}" />
		<Setter Property="Data" Value="{DynamicResource EDownArrowGeometry1}" />
	</Style>
	<Style x:Key="EUpArrow1"  TargetType="Path">
		<Setter Property="StrokeThickness" Value="1" />
		<Setter Property="Fill" Value="{DynamicResource EButtonForeground1}" />
		<Setter Property="Data" Value="{DynamicResource EUpArrowGeometry1}" />
	</Style>

	<!-- Simple Expander ToggleButton - This Button is used by the Expander control. When it is toggled it switches visibility on the Up_Arrow and Down_Arrow -->
	<ControlTemplate x:Key="IExpanderToggleButton" TargetType="{x:Type ToggleButton}">
		<Grid Height="20" Width="20" Margin="2">
			<Ellipse x:Name="ExpButton" Height="20" Width="20"
				 Fill="{DynamicResource EControlToggleNormalBrush}"
				 Stroke="{DynamicResource EControlBorderBrush1}" />
			<Path x:Name="Up_Arrow" Style="{DynamicResource EControlToggleArrow1}"/>
			<Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="{DynamicResource EControlToggleGlyphFill}" Data="{DynamicResource EDownArrowGeometry1}"/>
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Fill" Value="{DynamicResource EControlToggleMouseOverBrush}" TargetName="ExpButton"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter Property="Fill" Value="{DynamicResource EControlTogglePressedBrush}" TargetName="ExpButton"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow"/>
				<Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledBackgroundBrush}" TargetName="ExpButton"/>
				<Setter Property="Stroke" Value="{DynamicResource EControlToggleDisabledBorderBrush}" TargetName="ExpButton"/>
				<Setter Property="Foreground" Value="{DynamicResource EControlToggleDisabledForegroundBrush}"/>
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledGlyphFill}" TargetName="Up_Arrow"/>
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledGlyphFill}" TargetName="Down_Arrow"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<ControlTemplate x:Key="ITreeViewToggleButton" TargetType="{x:Type ToggleButton}" >
		<Grid Height="20" Width="20" Margin="2,2,2,0">
			<Ellipse x:Name="ExpButton" Height="20" Width="20"
				 Fill="{DynamicResource EControlToggleNormalBrush}"
				 Stroke="{DynamicResource EControlBorderBrush1}" />
			<!--<Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" Stroke="{DynamicResource NormalBorderBrush}"/>-->
			<Path Margin="0,5,0,0"  HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="Up_Arrow" Style="{DynamicResource EControlToggleArrow1}" Data="{DynamicResource EPlusGlyphGeometry1}" />
			<Path Margin="0,0,0,0"  HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" x:Name="Down_Arrow" Fill="{DynamicResource EControlToggleGlyphFill}" Data="{DynamicResource EMinusGlyphGeometry1}"/>
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Fill" Value="{DynamicResource EControlToggleMouseOverBrush}" TargetName="ExpButton"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter Property="Fill" Value="{DynamicResource EControlTogglePressedBrush}" TargetName="ExpButton"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow"/>
				<Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledBackgroundBrush}" TargetName="ExpButton"/>
				<Setter Property="Stroke" Value="{DynamicResource EControlToggleDisabledBorderBrush}" TargetName="ExpButton"/>
				<Setter Property="Foreground" Value="{DynamicResource EControlToggleDisabledForegroundBrush}"/>
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledGlyphFill}" TargetName="Up_Arrow"/>
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledGlyphFill}" TargetName="Down_Arrow"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style  x:Key="EExpanderStyle1" TargetType="Expander">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="Background" Value="{DynamicResource EUserControlBrush}" />
		<!--transparent, o EPanelBackgroundBrush1-->
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Padding" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<!--<Border SnapsToDevicePixels="true" Background="{TemplateBinding Background}" 
				  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
				  CornerRadius="{DynamicResource EControlCornerRadius1}">-->
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*" x:Name="ContentRow"/>
						</Grid.RowDefinitions>
						<Border Grid.Row="0" x:Name="Border" 
						Background="{DynamicResource ETabItemBackgroundBrush1}" 
						BorderBrush="{TemplateBinding BorderBrush}" 
						BorderThickness="{TemplateBinding BorderThickness}" 
						CornerRadius="4,4,0,0">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="24"/>
									<ColumnDefinition Width="*"/>
								</Grid.ColumnDefinitions>
								<ToggleButton Template="{DynamicResource IExpanderToggleButton}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True"/>
								<ContentPresenter Grid.Column="1" Margin="4" RecognizesAccessKey="False" ContentSource="Header"/>
							</Grid>
						</Border>
						<Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" Background="{TemplateBinding Background}" 
						BorderBrush="{TemplateBinding BorderBrush}" 
						BorderThickness="1,0,1,1" CornerRadius="0,0,4,4">
							<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="True">
							<Setter Property="Visibility" Value="Visible" TargetName="ExpandSite"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Border"/>
							<Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}" TargetName="Border"/>
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>

				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style  x:Key="EModalDialogFrameStyle1" TargetType="Border">
		<Setter Property="BorderThickness" Value="3" />
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}" />
		<Setter Property="CornerRadius" Value="{DynamicResource EControlCornerRadius1}" />
		<Setter Property="Background" Value="{DynamicResource EUserControlBrush}" />

	</Style>

    <Style  x:Key="EModalDialogFrameYellow" TargetType="Border">
        <Setter Property="BorderThickness" Value="3" />
        <Setter Property="BorderBrush" Value="Yellow" />
        <Setter Property="CornerRadius" Value="{DynamicResource EControlCornerRadius1}" />
        <Setter Property="Background" Value="{DynamicResource EUserControlBrush}" />

    </Style>

    <!--viewer control styles-->
	<Style x:Key="EInfoWindow_BorderStyle1" TargetType="Border">
		<Setter Property="Background" Value="{DynamicResource EInfoWindowBackground1}" />
		<!--{DynamicResource EPanelBackgroundBrush1}-->
		<Setter Property="CornerRadius" Value="{DynamicResource EControlCornerRadius1}" />
	</Style>
	<Style x:Key="EInfoWindow_NoBorderStyle1" TargetType="Border">
		<Setter Property="Background" Value="Transparent" />
	</Style>

	<Style x:Key="EViewerControl_Style1" TargetType="UserControl">
		<Setter Property="Background" Value="{DynamicResource EViewerControlBackground1}" />
		<!---->
  </Style>
  
	<Color x:Key="EInfoWindowForegroundColor1" A="255" R="225" G="225" B="225" />
  <Color x:Key="EInfoWindowForegroundColor2" A="255" R="255" G="255" B="0" />
	  <Color x:Key="EInfoWindowForegroundColor3" A="255" R="160" G="160" B="160" />

   <Style x:Key="EInfoWindow_TextStyleMeasureOnViewer" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
	  </Setter.Value>
	</Setter>
		  <Setter Property="Control.FontSize" Value="21"/>
	 
	<Style.Triggers>
		<Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
			<Trigger.EnterActions>
				<BeginStoryboard>
					<Storyboard>
						<ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color" />
					</Storyboard>
				</BeginStoryboard>
			</Trigger.EnterActions>
		</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="EInfoWindow_VersionMeasureOnViewer2" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyleMeasureOnViewer}">
		<Setter Property="TextBlock.TextAlignment" Value="Right" />
		<Setter Property="TextBlock.Margin" Value="0,0,3,0" />
	</Style>
  
		<Style x:Key="EMeasureMenuInfoWindow_TextStyle1" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
		  <Setter Property="VerticalAlignment" Value="Center"></Setter>
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
	  </Setter.Value>
	</Setter>
	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize">
		  <Setter.Value>
			<MultiBinding Converter="{StaticResource FontSizeMeasureMenuConverterInstance}" ConverterParameter="9">
			  <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
			  <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
			</MultiBinding>
		  </Setter.Value>
		</Setter>
	  </Trigger>

		<DataTrigger Binding="{Binding Path=Menucommand.ToggleButtonIsChecked}" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
				<Setter Property="Control.FontWeight" Value="Bold" />
				<Setter Property="Control.FontStyle" Value="Italic"/>
			</DataTrigger>
		 <Trigger Property="TreeViewItem.IsMouseOver" Value="True">
				  <Setter Property="Foreground">
				<Setter.Value>
					<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
				</Setter.Value>
			</Setter></Trigger>      </Style.Triggers>
  </Style>
	
	
	 
	<Style x:Key="EMeasureMenuGroupInfoWindow_TextStyle1" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
			<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
			<Setter Property="VerticalAlignment" Value="Center"></Setter>
		<Setter Property="Background" Value="#ff303030"></Setter>
			<Setter Property="Foreground">
				<Setter.Value>
					<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
				</Setter.Value>
			</Setter>
			<Style.Triggers>
				<Trigger Property="IsVisible" Value="True">
					<Setter Property="Control.FontSize" >
					   <Setter.Value>
							<MultiBinding Converter="{StaticResource FontSizeMeasureMenuConverterInstance}" ConverterParameter="{StaticResource Static_EInfoWindowFontSizeGroup}">
								<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
								<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
							</MultiBinding>
						</Setter.Value>
					</Setter>
				</Trigger>
			 <DataTrigger Binding="{Binding Path=Menucommand.IsTreeviewitemExpanded}" Value="True">
			<Setter Property="Control.Foreground" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
		   <Setter Property="Control.FontWeight" Value="Bold" />
	  <Setter Property="Control.FontStyle" Value="Italic"/>
		</DataTrigger>
		<DataTrigger Binding="{Binding Path=Menucommand.ToggleButtonIsChecked}" Value="True">
			<Setter Property="Foreground" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
			<Setter Property="Control.FontWeight" Value="Bold" />
	  <Setter Property="Control.FontStyle" Value="Italic"/>
					<Setter Property="Background" Value="Black"></Setter>
</DataTrigger>
<DataTrigger Binding="{Binding Path=IsExpandible}" Value="False">
			<Setter Property="Background" Value="Black"></Setter>

</DataTrigger>
			<Trigger Property="TreeViewItem.IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
				  <Setter Property="Foreground">
				<Setter.Value>
					<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
				</Setter.Value>
			</Setter>
			</Trigger>
		</Style.Triggers>
		</Style>

	<Style x:Key="EMeasureMenuMacroInfoWindow_TextStyle1" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
		<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
		<Setter Property="VerticalAlignment" Value="Center"></Setter>
				<Setter Property="Background" Value="#ff151515"></Setter>

		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
			</Setter.Value>
		</Setter>
        
     
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="Control.FontSize" >
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeMeasureMenuConverterInstance}" ConverterParameter="{StaticResource Static_EInfoWindowFontSizeMacro}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
            
		


			<DataTrigger Binding="{Binding Path=Menucommand.IsTreeviewitemExpanded}" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
                <Setter Property="Control.FontWeight" Value="Bold" />
                <Setter Property="Control.FontStyle" Value="Italic"/>
                	<Setter Property="Control.FontSize" >
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeMeasureMenuConverterInstance}" ConverterParameter="{StaticResource Static_EInfoWindowFontSizeMacro}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
                
			</DataTrigger>
			  <DataTrigger Binding="{Binding Path=Menucommand.ToggleButtonIsChecked}" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
				<Setter Property="Control.FontWeight" Value="Bold" />
				<Setter Property="Control.FontStyle" Value="Italic"/>
                  	<Setter Property="Control.FontSize" >
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeMeasureMenuConverterInstance}" ConverterParameter="{StaticResource Static_EInfoWindowFontSizeMacro}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</DataTrigger>
			<Trigger Property="TreeViewItem.IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
					  <Setter Property="Foreground">
				<Setter.Value>
					<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
				</Setter.Value>
			</Setter>
			</Trigger>
		</Style.Triggers>
      
	</Style>

	<Style x:Key="EMeasureMenuSubInfoWindow_TextStyle1" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
		<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
		<Setter Property="VerticalAlignment" Value="Center"></Setter>
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="Control.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeMeasureMenuConverterInstance}"  ConverterParameter="{StaticResource Static_EInfoWindowFontSizeSub}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
			

	  
			<DataTrigger Binding="{Binding Path=Menucommand.ToggleButtonIsChecked}" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
				<Setter Property="Control.FontWeight" Value="Bold" />
				<Setter Property="Control.FontStyle" Value="Italic"/>
			</DataTrigger>
			<Trigger Property="TreeViewItem.IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource EHighlightedItemBackgroundBrush2}"/>
					  <Setter Property="Foreground">
				<Setter.Value>
					<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
				</Setter.Value>
			</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<Style x:Key="EInfoWindow_TextStyle1" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
	  </Setter.Value>
	</Setter>
	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize">
		  <Setter.Value>
			<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EInfoWindowFontSize1}">
			  <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
			  <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
			</MultiBinding>
		  </Setter.Value>
		</Setter>
	  </Trigger>
	  <Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
		<Trigger.EnterActions>
		  <BeginStoryboard>
			<Storyboard>
			  <ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color" />
			</Storyboard>
		  </BeginStoryboard>
		</Trigger.EnterActions>
	  </Trigger>
	  </Style.Triggers>
  </Style>
    
     <Style x:Key="EInfoWindow_TextStyle3" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
		<Setter Property="TextBlock.FontWeight" Value="Normal"></Setter>
        <Setter Property="TextBlock.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="TextBlock.HorizontalAlignment" Value="Left"></Setter>
        <Setter Property="TextBlock.Margin" Value="3,0,3,0"></Setter>
    </Style>
    
     <Style x:Key="EInfoWindow_TextStyle4" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
		<Setter Property="TextBlock.FontWeight" Value="Bold"></Setter>
        <Setter Property="TextBlock.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="TextBlock.HorizontalAlignment" Value="Center"></Setter>
    </Style>
      <Style x:Key="EInfoWindow_TextStyle5" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
		<Setter Property="TextBlock.FontWeight" Value="Bold"></Setter>
        <Setter Property="TextBlock.VerticalAlignment" Value="Center"></Setter>
        <Setter Property="TextBlock.HorizontalAlignment" Value="Stretch"></Setter>
          <Setter Property="TextAlignment" Value="Center"></Setter>
          <Setter Property="Background" Value="#ff505050"></Setter>

    </Style>
	<Style x:Key="EInfoWindow_Version2TextStyle1" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
		<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor1}" />
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="Control.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EInfoWindowVersion2FontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color">
							</ColorAnimation>
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
			</Trigger>
		</Style.Triggers>
	</Style>

  <Style x:Key="EInfoWindow_ColorRed" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="Red" />
	  </Setter.Value>
	</Setter>
	<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EInfoWindowHeaderStyle1FontWeight}" />
  </Style>
	
  <Style x:Key="EInfoWindow_ColorYellow" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="Yellow" />
	  </Setter.Value>
	</Setter>
	<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EInfoWindowHeaderStyle1FontWeight}" />
  </Style>
	
  <Style x:Key="EInfoWindow_ColorGreen" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="Green" />
	  </Setter.Value>
	</Setter>
	<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EInfoWindowHeaderStyle1FontWeight}" />
  </Style>
	
	<Style x:Key="EInfoWindow_Area17" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor3}" />
	  </Setter.Value>
	</Setter>
	 <Setter Property="Margin" Value="0,0,0,0"/>
	<Setter Property="HorizontalAlignment" Value="Center"/>
	<Setter Property="VerticalAlignment" Value="Center"/>
	<Setter Property="TextWrapping" Value="NoWrap"/>
	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize" Value="16" />
	  </Trigger>
	  <Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
		<Trigger.EnterActions>
		  <BeginStoryboard>
			<Storyboard>
			  <ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color">
			  </ColorAnimation>
			</Storyboard>
		  </BeginStoryboard>
		</Trigger.EnterActions>
	  </Trigger>
	  </Style.Triggers>
  </Style>
	
	  <Style x:Key="EInfoWindow_Area17Button" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor3}" />
	  </Setter.Value>
	</Setter>
	 <Setter Property="Margin" Value="0,0,0,0"/>
	<Setter Property="HorizontalAlignment" Value="Center"/>
	<Setter Property="VerticalAlignment" Value="Center"/>
	<Setter Property="TextWrapping" Value="NoWrap"/>
	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize" Value="13" />
	  </Trigger>
	  <Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
		<Trigger.EnterActions>
		  <BeginStoryboard>
			<Storyboard>
			  <ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color">
			  </ColorAnimation>
			</Storyboard>
		  </BeginStoryboard>
		</Trigger.EnterActions>
	  </Trigger>
	  </Style.Triggers>
  </Style>
	
	  <Style x:Key="EInfoWindow_Area17Enter" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor3}" />
	  </Setter.Value>
	</Setter>
	 <Setter Property="Margin" Value="0,0,0,0"/>
	<Setter Property="HorizontalAlignment" Value="Right"/>
	<Setter Property="VerticalAlignment" Value="Center"/>
	<Setter Property="TextWrapping" Value="NoWrap"/>
	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize" Value="16" />
	  </Trigger>
	  <Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
		<Trigger.EnterActions>
		  <BeginStoryboard>
			<Storyboard>
			  <ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color">
			  </ColorAnimation>
			</Storyboard>
		  </BeginStoryboard>
		</Trigger.EnterActions>
	  </Trigger>
	  </Style.Triggers>
  </Style>
	
	
	
	
	
	
	  <Style x:Key="EInfoWindow_Area17Undo" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor3}" />
	  </Setter.Value>
	</Setter>
	 <Setter Property="Margin" Value="0,0,0,0"/>
	<Setter Property="HorizontalAlignment" Value="Left"/>
	<Setter Property="VerticalAlignment" Value="Center"/>
	<Setter Property="TextWrapping" Value="NoWrap"/>
	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize" Value="16" />
	  </Trigger>
	  <Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
		<Trigger.EnterActions>
		  <BeginStoryboard>
			<Storyboard>
			  <ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color">
			  </ColorAnimation>
			</Storyboard>
		  </BeginStoryboard>
		</Trigger.EnterActions>
	  </Trigger>
	  </Style.Triggers>
  </Style>
	<Style x:Key="EInfoWindow_Area17CenterJoyDX" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor3}" />
	  </Setter.Value>
	</Setter>
		<Setter Property="Margin" Value="14,0,0,0"/>
	<Setter Property="HorizontalAlignment" Value="Center"/>
	<Setter Property="VerticalAlignment" Value="Center"/>
		 <Setter Property="TextWrapping" Value="NoWrap"/>
	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize" Value="16" />
	  </Trigger>
	  <Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
		<Trigger.EnterActions>
		  <BeginStoryboard>
			<Storyboard>
			  <ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color">
			  </ColorAnimation>
			</Storyboard>
		  </BeginStoryboard>
		</Trigger.EnterActions>
	  </Trigger>
	  </Style.Triggers>
  </Style>
	
	<Style x:Key="EInfoWindow_Area17CenterJoySX" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowFontWeight1}" />
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor3}" />
	  </Setter.Value>
	</Setter>
		<Setter Property="Margin" Value="14,0,0,0"/>
	<Setter Property="HorizontalAlignment" Value="Center"/>
	<Setter Property="VerticalAlignment" Value="Center"/>
		 <Setter Property="TextWrapping" Value="NoWrap"/>
	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize" Value="16" />
	  </Trigger>
	  <Trigger Property="local:AttachedStyleProperties.FadingHighlight" Value="true">
		<Trigger.EnterActions>
		  <BeginStoryboard>
			<Storyboard>
			  <ColorAnimation From="{StaticResource EInfoWindowForegroundColor2}" To="{StaticResource EInfoWindowForegroundColor1}" Duration="0:0:2" AutoReverse="False" Storyboard.TargetProperty="(TextBlock.Foreground).Color">
			  </ColorAnimation>
			</Storyboard>
		  </BeginStoryboard>
		</Trigger.EnterActions>
	  </Trigger>
	  </Style.Triggers>
  </Style>
	
  <Style x:Key="EInfoWindow_CustomMeasureTextStyle1" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
	  <Setter Property="TextBlock.FontStyle" Value="Italic"/>
	  <Setter Property="TextBlock.FontFamily" Value="Verdana"/>
  </Style>
  
  <Style x:Key="EInfoWindow_MagnifiedTextStyle1" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
	<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowMagnifiedFontWeight1}" />
   	<Style.Triggers>
	  <Trigger Property="IsVisible" Value="True">
		<Setter Property="Control.FontSize">
		  <Setter.Value>
			<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EInfoWindowMagnifiedFontSize1}">
			  <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
			  <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
			</MultiBinding>
		  </Setter.Value>
		</Setter>
      </Trigger>
           
	  </Style.Triggers>
  </Style>
  
  <Style x:Key="EInfoWindow_TextStyle2" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
	<Setter Property="TextBlock.TextAlignment" Value="Right" />
	<Setter Property="TextBlock.Margin" Value="0,0,3,0" />
  </Style>
  
  <Style x:Key="EInfoWindow_MagnifiedTextStyle2" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_MagnifiedTextStyle1}">
	<Setter Property="TextBlock.TextAlignment" Value="Right" />
	<Setter Property="TextBlock.Margin" Value="0,0,3,0" />
  </Style>
  
  
  
  <Style x:Key="EInfoWindow_HeaderStyle1" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor2}" />
	  </Setter.Value>
	</Setter>
	<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EInfoWindowHeaderStyle1FontWeight}" />
  </Style>

	<Style x:Key="EInfoWindow_CustomMeasureHeaderStyle1" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource EInfoWindow_HeaderStyle1}">
		<Setter Property="TextBlock.FontStyle" Value="Italic"/>
		<Setter Property="TextBlock.FontFamily" Value="Verdana"/>
	</Style>

	<Style x:Key="EInfoWindow_MagnifiedHeaderStyle1" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_MagnifiedTextStyle1}">
	<Setter Property="Foreground">
	  <Setter.Value>
		<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor2}" />
	  </Setter.Value>
	</Setter>
	<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EInfoWindowMagnifiedHeaderStyle1FontWeight}" />
	<!--Bold-->
	</Style>

	<Style x:Key="EInfoWindow_PatientDataHeaderStyle1" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyle1}">
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor2}" />
			</Setter.Value>
		</Setter>
		<Setter Property="TextBlock.FontStyle" Value="{DynamicResource EInfoWindowPatientDataHeader1FontStyle}" />
		<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowPatientDataHeader1FontWeight}" />
	</Style>

	<!--end viewer control styles-->
	<!-- Version2 viewer control styles to be used for measures -->

	<Style x:Key="EInfoWindow_Version2CustomMeasureTextStyle1" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource EInfoWindow_Version2TextStyle1}">
		<Setter Property="TextBlock.FontStyle" Value="Italic"/>
		<Setter Property="TextBlock.FontFamily" Value="Verdana"/>
	</Style>

	<Style x:Key="EInfoWindow_Version2TextStyle2" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_Version2TextStyle1}">
		<Setter Property="TextBlock.TextAlignment" Value="Right" />
		<Setter Property="TextBlock.Margin" Value="0,0,3,0" />
	</Style>

	<Style x:Key="EInfoWindow_Version2HeaderStyle1" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_Version2TextStyle1}">
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor2}" />
			</Setter.Value>
		</Setter>
		<Setter Property="TextBlock.FontWeight" Value="{DynamicResource EInfoWindowHeaderStyle1FontWeight}" />
		<!--Bold-->
	</Style>

	<Style x:Key="EInfoWindow_Version2CustomMeasureHeaderStyle1" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource EInfoWindow_Version2HeaderStyle1}">
		<Setter Property="TextBlock.FontStyle" Value="Italic"/>
		<Setter Property="TextBlock.FontFamily" Value="Verdana"/>
	</Style>

	<Style x:Key="EInfoWindow_Version2PatientDataHeaderStyle1" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_Version2TextStyle1}">
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor2}" />
			</Setter.Value>
		</Setter>
		<Setter Property="TextBlock.FontStyle" Value="{DynamicResource EInfoWindowPatientDataHeader1FontStyle}" />
		<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowPatientDataHeader1FontWeight}" />
	</Style>


	<Style x:Key="EInfoWindow_Version3PatientDataHeaderStyle1" TargetType="TextBlock" BasedOn="{StaticResource EInfoWindow_TextStyleMeasureOnViewer}">
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{DynamicResource EInfoWindowForegroundColor2}" />
			</Setter.Value>
		</Setter>
		<Setter Property="TextBlock.FontStyle" Value="{DynamicResource EInfoWindowPatientDataHeader1FontStyle}" />
		<Setter Property="Control.FontWeight" Value="{DynamicResource EInfoWindowPatientDataHeader1FontWeight}" />
	</Style>
	<!-- end Version2 viewer control styles -->

	<!--<Style TargetType="TreeViewItem" >
		--><!--x:Key="ETreeViewItemStyle1"--><!--
		<Setter Property="IsExpanded" Value="True" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="19"
					  Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<ToggleButton x:Name="Expander"
				  Template="{StaticResource ITreeViewToggleButton}"
				  IsChecked="{Binding Path=IsExpanded,
							  RelativeSource={RelativeSource TemplatedParent}}"
				  ClickMode="Press"/>
						<Border Name="Bd"
			  Grid.Column="1"
			  Background="{TemplateBinding Background}"
			  BorderBrush="{TemplateBinding BorderBrush}"
			  BorderThickness="{TemplateBinding BorderThickness}"
			  Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="PART_Header"
					  ContentSource="Header"
					  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
						</Border>
						<ItemsPresenter x:Name="ItemsHost"
				  Grid.Row="1"
				  Grid.Column="1"
				  Grid.ColumnSpan="2"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded"
			   Value="false">
							<Setter TargetName="ItemsHost"
				Property="Visibility"
				Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems"
			   Value="false">
							<Setter TargetName="Expander"
				Property="Visibility"
				Value="Hidden"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader"
					 Value="false"/>
								<Condition Property="Width"
					 Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header"
				Property="MinWidth"
				Value="75"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader"
					 Value="false"/>
								<Condition Property="Height"
					 Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header"
				Property="MinHeight"
				Value="19"/>
						</MultiTrigger>
						<Trigger Property="IsSelected"
			   Value="true">
							<Setter TargetName="Bd"
				Property="Background"
				Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
							<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
					 Value="true"/>
								<Condition Property="IsSelectionActive"
					 Value="false"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="Bd"
				Property="Background"
				Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
							<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled"
			   Value="false">
							<Setter Property="Foreground"
				Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

	<!--Fill="{Binding ROIBrush}"-->
	<ControlTemplate x:Key="FlowQuantificationITreeViewToggleButton" TargetType="{x:Type ToggleButton}" >
		<Grid Height="20" Width="20" Margin="2,2,2,0">
			<Ellipse x:Name="ExpButton" Height="20" Width="20"
			  Fill="{Binding ROIBrush}"
				 Stroke="{DynamicResource EControlBorderBrush1}" />
			<!--<Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" Stroke="{DynamicResource NormalBorderBrush}"/>-->
			<Path Margin="0,5,0,0"  HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="Up_Arrow" Style="{DynamicResource EControlToggleArrow1}" Data="{DynamicResource EPlusGlyphGeometry1}" />
			<Path Margin="0,0,0,0"  HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" x:Name="Down_Arrow" Fill="{DynamicResource EControlToggleGlyphFill}" Data="{DynamicResource EMinusGlyphGeometry1}"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Fill" Value="{DynamicResource EControlToggleMouseOverBrush}" TargetName="ExpButton"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter Property="Fill" Value="{DynamicResource EControlTogglePressedBrush}" TargetName="ExpButton"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow"/>
				<Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledBackgroundBrush}" TargetName="ExpButton"/>
				<Setter Property="Stroke" Value="{DynamicResource EControlToggleDisabledBorderBrush}" TargetName="ExpButton"/>
				<Setter Property="Foreground" Value="{DynamicResource EControlToggleDisabledForegroundBrush}"/>
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledGlyphFill}" TargetName="Up_Arrow"/>
				<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledGlyphFill}" TargetName="Down_Arrow"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style TargetType="TreeView" x:Key="ETreeViewStyle2"></Style>

	<Style x:Key="FlowQuantificationTreeViewItem" TargetType="TreeViewItem" >
		<!--x:Key="ETreeViewItemStyle1"-->
		<Setter Property="IsExpanded" Value="True" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid Name="treegrid">
						<Grid.ColumnDefinitions>
							<ColumnDefinition  Width="25"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<ToggleButton x:Name="Expander"
									  Template="{StaticResource FlowQuantificationITreeViewToggleButton}"
									  IsChecked="{Binding Path=IsExpanded,
							RelativeSource={RelativeSource TemplatedParent}}"
									  ClickMode="Press"/>
						<Border  Name="Bd" 
								Grid.Column="1"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="Stretch" 
								>
							
							<ContentPresenter x:Name="PART_Header"
											  ContentSource="Header"
											  HorizontalAlignment="Stretch" />
						</Border>
						<ItemsPresenter x:Name="ItemsHost"   Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="false">
							<Setter TargetName="ItemsHost"
									Property="Visibility"
									Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems"  Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
						</Trigger>
						<!--<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false"/>
								<Condition Property="Width"  Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth"  Value="75"/>
						</MultiTrigger>-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false"/>
								<Condition Property="Height" Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
						</MultiTrigger>
						<Trigger Property="IsSelected"  Value="true">
							<Setter TargetName="Bd"  Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                         
                        </Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="IsSelectionActive" Value="false"/>
							</MultiTrigger.Conditions>
                            <Setter TargetName="Bd"  Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>


                        </MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="TreeViewItem"  >
		<!--<Style.Triggers>
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding ElementName=PART_Header, Path=Visibility}" Value="Collapsed" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Visibility" Value="Collapsed"/>
			</MultiDataTrigger>
		</Style.Triggers>-->
		<!--x:Key="ETreeViewItemStyle1"-->
		<Setter Property="IsExpanded" Value="{Binding IsExpanded,RelativeSource={RelativeSource self}, FallbackValue=true}" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="Visibility" Value="{Binding Path=Content.Visibility, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid Name="treegrid">
						<Grid.Style>
							<Style TargetType="Grid">
								<Style.Triggers>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding ElementName=PART_Header, Path=Visibility}" Value="Collapsed" />
										</MultiDataTrigger.Conditions>
										<Setter Property="Visibility"  Value="Collapsed"/>
									</MultiDataTrigger>
								</Style.Triggers>
							</Style>
						</Grid.Style>

						<Grid.ColumnDefinitions>
							<ColumnDefinition  Width="25"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>

						<ToggleButton x:Name="Expander"
									  Template="{StaticResource FlowQuantificationITreeViewToggleButton}"
									  IsChecked="{Binding Path=IsExpanded,
							RelativeSource={RelativeSource TemplatedParent}}"
									  ClickMode="Press"/>
						<Border  Name="Bd" 
								Grid.Column="1"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="Stretch" 
								>

							<ContentPresenter x:Name="PART_Header"
											  ContentSource="Header"
											  HorizontalAlignment="Stretch" Visibility="{Binding Path=Content.Visibility, RelativeSource={RelativeSource Self}}"
  >
								<!--<ContentPresenter.Triggers>

									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="Visibility" Value="Collapsed"/>
										</MultiTrigger.Conditions>
										<Setter TargetName="treegrid" Property="Visibility" Value="Collapsed"/>
									</MultiTrigger>

								</ContentPresenter.Triggers>-->
							</ContentPresenter>
						</Border>
						<ItemsPresenter x:Name="ItemsHost"   Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="false">
							<Setter TargetName="ItemsHost"
									Property="Visibility"
									Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems"  Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
						</Trigger>
						<!--<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false"/>
								<Condition Property="Width"  Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth"  Value="75"/>
						</MultiTrigger>-->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false"/>
								<Condition Property="Height" Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
						</MultiTrigger>

						<Trigger Property="IsSelected"  Value="true">
                            <Setter TargetName="Bd"  Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true"/>
								<Condition Property="IsSelectionActive" Value="false"/>
							</MultiTrigger.Conditions>
                            <Setter TargetName="Bd"  Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>

                        </MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<Style TargetType="TreeView" x:Key="ETreeViewStyle1">
		<Style.Resources>
			<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{DynamicResource EFocusedItemBackgroundColor1}"/>
			<SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="{DynamicResource EFocusedItemTextColor1}"/>
			<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="{DynamicResource ESelectedItemBackgroundColor1}"/>
			<SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="{DynamicResource ESelectedItemTextColor1}"/>
		</Style.Resources>
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}" />
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}" />
		<Setter Property="Background" Value="{DynamicResource EUserControlBrush}" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TreeView">
					<Border 
			Name="Border" 
			CornerRadius="{DynamicResource EControlCornerRadius1}" 
			Background="{TemplateBinding Background}"
			BorderBrush="{TemplateBinding BorderBrush}"
			BorderThickness="1" >
						<ScrollViewer
			  Focusable="False"
			  CanContentScroll="False"
			  Padding="4">
							<ItemsPresenter/>
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

	<Style x:Key="EPasswordBoxStyle1" TargetType="{x:Type PasswordBox}">
		<Setter Property="Margin" Value="{DynamicResource EStandardMargin}"/>
		<Setter Property="Background" Value="{DynamicResource EEditableAreaBrush1}"/>
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}"/>
		<Setter Property="Foreground" Value="{DynamicResource EEditableTextBrush1}"/>
		<Setter Property="Control.FontFamily" Value="{DynamicResource EditFontFamily1}"/>
		<Setter Property="Control.FontWeight" Value="{DynamicResource EStandardFontWeight}"/>
		<Style.Triggers>
			<Trigger Property="IsVisible" Value="True">
				<Setter Property="Control.FontSize">
					<Setter.Value>
						<MultiBinding Converter="{StaticResource FontSizeConverterInstance}" ConverterParameter="{StaticResource Static_EEditFontSize1}">
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualWidth" />
							<Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}" Path="ActualHeight" />
						</MultiBinding>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<DropShadowEffect x:Key="IIconShadowEffect" BlurRadius="4" Color="#ff303030" ShadowDepth="4" Opacity="0" PresentationOptions:Freeze="True" />
	<!--BlurRadius="{DynamicResource EIconShadowBlurRadius}" Color="{DynamicResource EIconShadowColor}" ShadowDepth="{DynamicResource EIconShadowDepth}"-->
	<Style x:Key="IStyleEffetto" TargetType="Canvas">
		<Setter Property="Effect" Value="{DynamicResource IIconShadowEffect}"/>
		<!--<Setter Property="Path.Fill" Value="{DynamicResource EIconForeground1}" />-->

	</Style>
    <Style x:Key="IStyleEffettoContentControl" TargetType="ContentControl">
        <Setter Property="Effect" Value="{DynamicResource IIconShadowEffect}"/>
        <!--<Setter Property="Path.Fill" Value="{DynamicResource EIconForeground1}" />-->

    </Style>

    <DropShadowEffect x:Key="BodymarkIIconShadowEffect" BlurRadius="4" Color="#ff303030" ShadowDepth="4" Opacity="1" PresentationOptions:Freeze="True" />
	<!--BlurRadius="{DynamicResource EIconShadowBlurRadius}" Color="{DynamicResource EIconShadowColor}" ShadowDepth="{DynamicResource EIconShadowDepth}"-->
	<Style x:Key="BodymarkIStyleEffetto" TargetType="ContentControl">
		<Setter Property="Effect" Value="{DynamicResource BodymarkIIconShadowEffect}"/>
		<!--<Setter Property="Path.Fill" Value="{DynamicResource EIconForeground1}" />-->

	</Style>
	<!-- text inside TS toggles-->
	<Style x:Key="EInputTSTouchableEncoderBtn_ActiveCommandText" TargetType="TextBlock"  BasedOn="{StaticResource ETouchScreenBtnFonts}">
		<Setter Property="Foreground" Value="{DynamicResource EButtonPressedForeground1}" />
		<Setter Property="FontWeight" Value="{DynamicResource ETouchScreenEncoderSelectedFontWeight}" />
		<Setter Property="Margin" Value="1" />
		<Setter Property="TextWrapping" Value="Wrap" />
		<Setter Property="TextAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="EInputTSTouchableEncoderBtn_NotActiveCommandText" TargetType="TextBlock"  BasedOn="{StaticResource ETouchScreenBtnFonts}">
		<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}" />
		<Setter Property="FontWeight" Value="{DynamicResource ETouchScreenBtnFontWeight}" />
		<Setter Property="Margin" Value="1" />
		<Setter Property="TextWrapping" Value="Wrap" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

	<Style x:Key="EGroupBoxStyle1"  TargetType="{x:Type GroupBox}">
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}" />
		<Setter Property="BorderThickness" Value="2" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<Grid SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="6" />
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="6" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="6" />
						</Grid.RowDefinitions>
						<Border CornerRadius="{DynamicResource EControlCornerRadius1}" Grid.Row="1" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Background="{TemplateBinding Background}" />
						<Border Name="Header" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
							<ContentPresenter ContentSource="Header" RecognizesAccessKey="False" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</Border>
						<ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<Border Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="3">
							<Border.OpacityMask>
								<MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="7">
									<Binding ElementName="Header" Path="ActualWidth" />
									<Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}" />
									<Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}" />
								</MultiBinding>
							</Border.OpacityMask>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource EGroupBoxStyle1}"/>
	<!--inherits from above groupbox style-->


	<Style x:Key="EControlBorderStyle1" TargetType="{x:Type Border}">
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="CornerRadius" Value="{DynamicResource EControlCornerRadius1}" />
	</Style>

	<Style x:Key="EControlBorderStyleSharpEdge" TargetType="{x:Type Border}">
		<Setter Property="BorderBrush" Value="{DynamicResource EControlBorderBrush1}" />
		<Setter Property="BorderThickness" Value="1" />
	</Style>

    <Style x:Key="MeasureCustomizationTableBorderStyleSharpEdge" TargetType="{x:Type Border}" BasedOn="{StaticResource EControlBorderStyleSharpEdge}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding WithSpace}" Value="True">
                <Setter Property="BorderThickness"  Value="0,0,0,0"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="EQwertyButtonStyle1" TargetType="Button">
		<Setter Property="Foreground" Value="{DynamicResource EButtonForeground1}"/>
		<Setter Property="Background" Value="{DynamicResource EQwertyKeybButtonColor}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="Padding" Value="10,5,10,5" />
		<!--<Setter Property="Effect" Value="{DynamicResource IButtonShadowEffect}"/>-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Grid>
						<Rectangle x:Name="GelBackground" RadiusX="2" RadiusY="2" Margin="0" Fill="{TemplateBinding Background}">
						</Rectangle>
						<ContentPresenter  Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" x:Name="contentPresenter" OpacityMask="#FF000000"/>
						<!--<TextBlock Text="{TemplateBinding Content}" TextWrapping="Wrap"  Margin="10,5,10,5" VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="contentPresenter" OpacityMask="#FF000000"/>-->
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EQwertyKeybPressedButtonColor}"/>

						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Fill" TargetName="GelBackground" Value="{DynamicResource EQwertyKeybDisabledButtonColor}"/>
							<Setter Property="Foreground" Value="{DynamicResource EDisabledTextBrush1}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<DataTemplate DataType="{x:Type local:GradientProgressData}">
		<!--set Width to 134 instead of 120 because introduced 14 pixel of margin to width-->
			<Grid  Margin="10,2,10,2">
				<Grid.RowDefinitions>
					<RowDefinition Height="40*"/>
					<RowDefinition Height="60*"/>
				</Grid.RowDefinitions>

			<Border Grid.Row="0" BorderBrush="{DynamicResource EControlBorderBrush1}" CornerRadius="{DynamicResource EControlCornerRadius1}" BorderThickness="1">
				<Border.Background>
					<LinearGradientBrush StartPoint="0,0" EndPoint="1,0" Opacity="0.75" >
						<GradientStop x:Name="c_Stop1" Offset="{Binding StopLowOffset}" Color="Transparent"/>
						<GradientStop x:Name="c_Stop2" Offset="{Binding StopMidOffset}" Color="{DynamicResource EInfoWindowProgressColor1}"/>
						<GradientStop x:Name="c_Stop3" Offset="{Binding StopMidOffset}" Color="{DynamicResource EInfoWindowProgressColor1}"/>
						<GradientStop x:Name="c_Stop4" Offset="{Binding StopHighOffset}" Color="Transparent"/>
					</LinearGradientBrush>
				</Border.Background>

				<!--<Grid Name="Ellipse" Grid.Column="{Binding Position}" >
					<Ellipse Fill="#ff414141" StrokeThickness="1" >
					</Ellipse>
					<Ellipse  Margin="24,24,24,24" Fill="{DynamicResource EButtonBackground3}"  ></Ellipse>
				</Grid>-->
			</Border>

		   


			<TextBlock Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" Text="{Binding MinValue}" Style="{DynamicResource EInfoWindow_TextStyle1}" />
			<TextBlock Grid.Row="1" Grid.Column="6" HorizontalAlignment="Right" Text="{Binding MaxValue}"  Style="{DynamicResource EInfoWindow_TextStyle1}" />
		</Grid>
	</DataTemplate>



	<!--<DataTemplate DataType="{x:Type local:GradientProgressData}">
		
	--><!--set Width to 134 instead of 120 because introduced 14 pixel of margin to width--><!--
	
		<Grid  Margin="10,2,10,2">
			<Grid.RowDefinitions>
				<RowDefinition Height="50*"/>
				<RowDefinition Height="50*"/>
			</Grid.RowDefinitions>

			
	--><!--<Border Grid.Row="0" BorderBrush="{DynamicResource EControlBorderBrush1}" CornerRadius="{DynamicResource EControlCornerRadius1}" BorderThickness="1">
	<Border.Background>
					<LinearGradientBrush StartPoint="0,0" EndPoint="1,0" Opacity="0.75" >
						<GradientStop x:Name="c_Stop1" Offset="{Binding StopLowOffset}" Color="Transparent"/>
						<GradientStop x:Name="c_Stop2" Offset="{Binding StopMidOffset}" Color="{DynamicResource EInfoWindowProgressColor1}"/>
						<GradientStop x:Name="c_Stop3" Offset="{Binding StopMidOffset}" Color="{DynamicResource EInfoWindowProgressColor1}"/>
						<GradientStop x:Name="c_Stop4" Offset="{Binding StopHighOffset}" Color="Transparent"/>
					</LinearGradientBrush>
				</Border.Background>--><!--
	
			<Border Grid.Row="0" CornerRadius="{DynamicResource EControlCornerRadius1}" BorderThickness="1">

				<Slider IsEnabled="False" HorizontalAlignment="Stretch" Name="c_Slide" Orientation="Horizontal" Value="{Binding Position}" Style="{DynamicResource ESliderStyle5}"  VerticalAlignment="Center" TickPlacement="None"   Maximum="{Binding SliderMaxValue}" Minimum="{Binding SliderMinValue}"    Height="15"  TickFrequency = "100"  IsSnapToTickEnabled="False"  Margin="0"></Slider>


				
	--><!--<Grid Name="Ellipse" Grid.Column="{Binding Position}" >
					<Ellipse Fill="#ff414141" StrokeThickness="1" >
					</Ellipse>
					<Ellipse  Margin="24,24,24,24" Fill="{DynamicResource EButtonBackground3}"  ></Ellipse>
				</Grid>--><!--
	
			</Border>



			<TextBlock Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" Text="{Binding MinValue}" Style="{DynamicResource EInfoWindow_TextStyle1}" />
			<TextBlock Grid.Row="1" Grid.Column="6" HorizontalAlignment="Right" Text="{Binding MaxValue}"  Style="{DynamicResource EInfoWindow_TextStyle1}" />
		</Grid>
	</DataTemplate>-->


	<!-- binding treeview for quantification -->
	<Style x:Key="TreeViewItemFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
	<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Width" Value="25"/>
		<Setter Property="Height" Value="25"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}" >
					<Grid Height="20" Width="20" Margin="2,2,2,0">
						<Ellipse x:Name="ExpButton" Height="20" Width="20"
				   Fill="{Binding ROIBrush}"
				 Stroke="{DynamicResource EControlBorderBrush1}" />
						<!--<Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" Stroke="{DynamicResource NormalBorderBrush}"/>-->
						<Path Margin="0,5,0,0"  HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="Up_Arrow" Style="{DynamicResource EControlToggleArrow1}" Data="{DynamicResource EPlusGlyphGeometry1}" />
						<Path Margin="0,0,0,0"  HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" x:Name="Down_Arrow" Fill="{DynamicResource EControlToggleGlyphFill}" Data="{DynamicResource EMinusGlyphGeometry1}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Fill" Value="{DynamicResource EControlToggleMouseOverBrush}" TargetName="ExpButton"/>
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Fill" Value="{DynamicResource EControlTogglePressedBrush}" TargetName="ExpButton"/>
						</Trigger>
						<Trigger Property="IsChecked" Value="true">
							<Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow"/>
							<Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledBackgroundBrush}" TargetName="ExpButton"/>
							<Setter Property="Stroke" Value="{DynamicResource EControlToggleDisabledBorderBrush}" TargetName="ExpButton"/>
							<Setter Property="Foreground" Value="{DynamicResource EControlToggleDisabledForegroundBrush}"/>
							<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledGlyphFill}" TargetName="Up_Arrow"/>
							<Setter Property="Fill" Value="{DynamicResource EControlToggleDisabledGlyphFill}" TargetName="Down_Arrow"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>

			</Setter.Value>
		</Setter>
	</Style>
	<Style x:Key="TreeViewItemQuantification" TargetType="{x:Type TreeViewItem}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="IsExpanded" Value="True"></Setter>
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Padding" Value="1,0,0,0"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
		<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition MinWidth="19" Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
						<Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
							<ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="4,0,0,0"/>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="false">
							<Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
						</Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter  Property="Background" Value="Transparent"/>
                            <Setter  Property="Foreground" Value="Transparent"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel/>
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

    <Style x:Key="A17" Style.TargetType="ItemsControl">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="14*" />
                            <RowDefinition Height="18*" />
                            <RowDefinition Height="36*" />
                            <RowDefinition Height="18*" />
                            <RowDefinition Height="14*" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="14*"/>
                            <ColumnDefinition Width="6*"/>
                            <ColumnDefinition Width="10*"/>
                            <ColumnDefinition Width="6*"/>
                            <ColumnDefinition Width="10*"/>
                            <ColumnDefinition Width="10*"/>
                            <ColumnDefinition Width="10*"/>
                            <ColumnDefinition Width="6*"/>
                            <ColumnDefinition Width="10*"/>
                            <ColumnDefinition Width="6*"/>
                            <ColumnDefinition Width="2*"/>
                            <ColumnDefinition Width="2*"/>
                            <ColumnDefinition Width="2*"/>
                            <ColumnDefinition Width="2*"/>
                            <ColumnDefinition Width="2*"/>
                            <ColumnDefinition Width="2*"/>
                        </Grid.ColumnDefinitions>
                        <!-- Row 1 -->
                        <TextBlock Style="{StaticResource EInfoWindow_Area17}"       Grid.Row="0" Grid.Column="2"                      Text="{Binding StringOnJoy0VEnc}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17}"       Grid.Row="0" Grid.Column="8"                      Text="{Binding StringOnJoy1VEnc}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17}"       Grid.Row="0" Grid.Column="3" Grid.ColumnSpan="5"  Text="{Binding Trackballaction}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17Button}" Grid.Row="0" Grid.Column="10" Grid.ColumnSpan="2" Text="{Binding KeybCmd2}"          />
                        <TextBlock Style="{StaticResource EInfoWindow_Area17Button}" Grid.Row="0" Grid.Column="13" Grid.ColumnSpan="2" Text="{Binding KeybCmd4}"          />
                        <!-- Row 2 -->
                        <ContentControl Grid.Row="1" Grid.Column="2" Grid.RowSpan="3"     Content="{Binding Joysticksx}"/>
                        <ContentControl Grid.Row="1" Grid.Column="5" Grid.RowSpan="3"     Content="{Binding Trackball}"/>
                        <ContentControl Grid.Row="1" Grid.Column="8" Grid.RowSpan="3"     Content="{Binding Joystickdx}"/>
                        <ContentControl Grid.Row="1" Grid.Column="10" Grid.ColumnSpan="2" Content="{Binding Btn2}"/>
                        <ContentControl Grid.Row="1" Grid.Column="13" Grid.ColumnSpan="2" Content="{Binding Btn4}"/>
                        <!-- Row 3-->
                        <TextBlock Style="{StaticResource EInfoWindow_Area17}" Grid.Row="2" Grid.Column="1" Text="{Binding StringOnJoy0Enc}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17CenterJoySX}" Grid.Row="2" Grid.Column="2" Text="{Binding StringOnJoy0Push}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17}" Grid.Row="2" Grid.Column="3" Text="{Binding StringOnJoy0HEnc}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17}" Grid.Row="2" Grid.Column="7" Text="{Binding StringOnJoy1HEnc}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17CenterJoyDX}" Grid.Row="2" Grid.Column="8" Text="{Binding StringOnJoy1Push}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17}" Grid.Row="2" Grid.Column="9" Text="{Binding StringOnJoy1Enc}"/>
                        <!-- Row 4 -->
                        <ContentControl Grid.Row="3" Grid.Column="11" Grid.ColumnSpan="2" Content="{Binding Btn1}"/>
                        <ContentControl Grid.Row="3" Grid.Column="14" Grid.ColumnSpan="2" Content="{Binding Btn3}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17Enter}" Grid.Row="3" Grid.Column="4" Text="{Binding Enter}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_Area17Undo}" Grid.Row="3" Grid.Column="6" Text="{Binding Undo}"/>
                        <!-- Row 5 -->
                        <TextBlock Style="{StaticResource EInfoWindow_Area17}" Grid.Row="4" Grid.Column="5"  Text="{Binding Auto}"          />
                        <TextBlock Style="{StaticResource EInfoWindow_Area17Button}" Grid.Row="4" Grid.Column="11" Grid.ColumnSpan="2" Text="{Binding KeybCmd1}" />
                        <TextBlock Style="{StaticResource EInfoWindow_Area17Button}" Grid.Row="4" Grid.Column="14" Grid.ColumnSpan="2" Text="{Binding KeybCmd3}" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="QuantificationPanel" Style.TargetType="ItemsControl">
		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid Visibility="{Binding FirstLevelVisibility}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="40*"/>
							<ColumnDefinition Width="25*"/>
							<ColumnDefinition Width="35*"/>
						</Grid.ColumnDefinitions>
                        <TextBlock Style="{StaticResource ELabelStyleQElaxto2d}" Grid.Column="0" Text="{Binding Name}" />
                        <TextBlock Style="{StaticResource ELabelStyleQElaxto2d}" Grid.Column="1" Text="{Binding StringValue}"/>
                        <TextBlock Style="{StaticResource ELabelStyleQElaxto2d}" Grid.Column="2" Text="{Binding Unit}"/>
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <Style x:Key="QuantificationPanel1" Style.TargetType="ItemsControl">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid Visibility="{Binding FirstLevelVisibility}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="40*"/>
                            <ColumnDefinition Width="25*"/>
                            <ColumnDefinition Width="35*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Style="{StaticResource EInfoWindow_MagnifiedTextStyle1}" Grid.Column="0" Text="{Binding Name}" />
                        <TextBlock Style="{StaticResource EInfoWindow_MagnifiedTextStyle1}" Grid.Column="1" Text="{Binding StringValue}"/>
                        <TextBlock Style="{StaticResource EInfoWindow_MagnifiedTextStyle1}" Grid.Column="2" Text="{Binding Unit}"/>
                    </Grid>
                </DataTemplate>
          </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="QuantificationTreeView" TargetType="TreeView">
       	<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="Background" Value="Black" />
		<Setter Property="BorderBrush" Value="Black" />
		<Setter Property="TreeViewItem.IsExpanded" Value="False"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <HierarchicalDataTemplate DataType="{x:Type contract:QuantificationROIData}" ItemsSource="{Binding Attributes, Mode=TwoWay}">
                    <StackPanel Orientation="Horizontal">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="20*"/>
                                <RowDefinition Height="80*"/>
                            </Grid.RowDefinitions>
                            <TextBlock Style="{StaticResource EInfoWindow_MagnifiedTextStyle1}" Background="{Binding ROINameBackGround}"  Foreground ="{Binding Color}" Text="{Binding ROIName}" FontStyle= "{Binding FontStyleROIName}" Grid.Row="0"/>
                            <ItemsControl Style="{StaticResource QuantificationPanel1}" ItemsSource="{Binding Attributes,Mode=TwoWay}" Grid.Row="1"></ItemsControl>
                        </Grid>
                    </StackPanel>
                    <HierarchicalDataTemplate.ItemTemplate>
                        <DataTemplate DataType="{x:Type contract:ObservableAttribute}" >
                            <Grid >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="40*"/>
                                    <ColumnDefinition Width="25*"/>
                                    <ColumnDefinition Width="35*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Style="{StaticResource EInfoWindow_MagnifiedTextStyle1}" Grid.Column="0" Text="{Binding Name}" />
                                <TextBlock Style="{StaticResource EInfoWindow_MagnifiedTextStyle1}" Grid.Column="1" Text="{Binding StringValue}"/>
                                <TextBlock Style="{StaticResource EInfoWindow_MagnifiedTextStyle1}" Grid.Column="2" Text="{Binding Unit}"/>
                            </Grid>
                        </DataTemplate>
                    </HierarchicalDataTemplate.ItemTemplate>
                    <HierarchicalDataTemplate.ItemContainerStyle>
                        <Style TargetType="TreeViewItem">
                            <Setter Property="Visibility" Value="{Binding AttributeVisibility}"/>
                            <Style.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="IsSelectionActive" Value="false"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="Transparent"/>
                                    <Setter Property="Foreground" Value="Transparent"/>
                                </MultiTrigger>
                            </Style.Triggers>
                        </Style>
                    </HierarchicalDataTemplate.ItemContainerStyle>
                 </HierarchicalDataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- end of binding treeview for quantification -->

	<!-- binding treeview for MeasureMenu on mainscreen -->
	<ControlTemplate x:Key="MainMenuMeasureButton" TargetType="{x:Type ToggleButton}" >
		<Grid Height="20" Width="20" Margin="2,2,2,0">
			<Canvas Name="ClosedFolder" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  Width="20" Height="20" Clip="F1 M 0,0L 76,0L 76,76L 0,76L 0,0">
				<Path Width="15" Height="15" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 21,30.0001L 55.9999,30.0001L 55.9999,50L 21,50L 21,30.0001 Z M 52,28L 37,28C 38,25 39.4999,24.0001 39.4999,24.0001L 50.75,24C 51.3023,24 52,24.6977 52,25.25L 52,28 Z "/>
			</Canvas>
			<Canvas Name="OpenFolder" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  Width="20" Height="20" Clip="F1 M 0,0L 76,0L 76,76L 0,76L 0,0">
				<Path Width="15" Height="15" Canvas.Left="0" Canvas.Top="0" Stretch="Fill" Fill="#FFFFFFFF" Data="F1 M 19,50L 28,34L 63,34L 54,50L 19,50 Z M 19,28.0001L 35,28C 36,25 37.4999,24.0001 37.4999,24.0001L 48.75,24C 49.3023,24 50,24.6977 50,25.25L 50,28L 53.9999,28.0001L 53.9999,32L 27,32L 19,46.4L 19,28.0001 Z "/>
			</Canvas>
		</Grid>
		<ControlTemplate.Triggers>
		
			<Trigger Property="IsChecked" Value="true">
				<Setter Property="Visibility" Value="Visible" TargetName="OpenFolder"/>
				<Setter Property="Visibility" Value="Collapsed" TargetName="ClosedFolder"/>
			</Trigger>

			<Trigger Property="IsChecked" Value="false">
				<Setter Property="Visibility" Value="Collapsed" TargetName="OpenFolder"/>
				<Setter Property="Visibility" Value="Visible" TargetName="ClosedFolder"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style x:Key="Style1" TargetType="TreeViewItem">
		<Setter Property="IsExpanded">
			<Setter.Value>
				<MultiBinding Converter="{StaticResource ExpanderConverterInstance}" UpdateSourceTrigger="PropertyChanged">
					<Binding Path="Menucommand.IsTreeviewitemExpanded" UpdateSourceTrigger="PropertyChanged" />
					<Binding Path="Menucommand.ToggleButtonIsChecked"   UpdateSourceTrigger="PropertyChanged"/>
					<Binding Path="Menucommand.Label"   UpdateSourceTrigger="PropertyChanged"/>
				</MultiBinding>
			</Setter.Value>
		</Setter>
		<Setter Property="IsEnabled" Value="{Binding Path=Menucommand.IsEnabled}"/>
		<Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<Grid Name="treegrid">
						<Grid.Style>
							<Style TargetType="Grid">
								<Style.Triggers>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding ElementName=PART_Header, Path=Visibility}" Value="Collapsed" />
										</MultiDataTrigger.Conditions>
										<Setter Property="Visibility"  Value="Collapsed"/>
									</MultiDataTrigger>
								</Style.Triggers>
							</Style>
						</Grid.Style>

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" MaxWidth="20"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>

						<ToggleButton x:Name="Expander"
									  Template="{StaticResource MainMenuMeasureButton}"
									  IsChecked="{Binding Path=IsExpanded,
							RelativeSource={RelativeSource TemplatedParent}}"
									  ClickMode="Press"/>
						<Border  Name="Bd" 
								Grid.Column="1"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="0"
								Padding="{TemplateBinding Padding}"
								HorizontalAlignment="Stretch" 
								>

							<ContentPresenter x:Name="PART_Header"
											  ContentSource="Header"
											  HorizontalAlignment="Stretch" Visibility="{Binding Path=Content.Visibility, RelativeSource={RelativeSource Self}}"/>
						</Border>
						<ItemsPresenter Margin="10,0,0,0" x:Name="ItemsHost"  Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
						<!--<TextBlock x:Name="Tick" Grid.Column="1" HorizontalAlignment="Right" Margin="0,0,35,0" Style="{StaticResource EMeasureMenuInfoWindow_TextStyle1}"  Text="{Binding Path=Menucommand.TouchScreenMark,  Converter={StaticResource TextConverterInstance}, UpdateSourceTrigger=PropertyChanged}"></TextBlock>-->


						<Viewbox  Grid.Column="1" Margin="0,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Right" x:Name="chevrondown" Width="16" Height="16">

							<Canvas Width="24" Height="24" >
								<Path Data="M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z" Fill="{DynamicResource EHighlightedItemBackgroundBrush2}" />
							</Canvas>
						</Viewbox>

						<!--<Canvas Grid.Column="1" Margin="0,0,5,0" HorizontalAlignment="Right"  Width="15" Height="15">
								<Path Data="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" Fill="White" />
							</Canvas>-->
						<Viewbox VerticalAlignment="Center"  Grid.Column="1" x:Name="chevronright" Margin="0,0,0,0" HorizontalAlignment="Right" Width="16" Height="16">
							<Canvas Width="24" Height="24">
								<Path Data="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" Fill="White" />
							</Canvas>
						</Viewbox>

					</Grid>
					<ControlTemplate.Triggers>
						

						<Trigger Property="IsExpanded" Value="false">
							<Setter TargetName="ItemsHost"
									Property="Visibility"
									Value="Collapsed"/>
						</Trigger>
				   
						<Trigger Property="HasItems"  Value="false">
							<Setter TargetName="Expander" Property="Visibility" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="HasItems"  Value="True">
							<Setter TargetName="Expander" Property="Visibility" Value="Collapsed"/>
						</Trigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Menucommand.ToggleButtonIsChecked}" Value="True" />
								<Condition Binding="{Binding Path=Menucommand.IsTreeviewitemExpanded}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chevronright"
									Property="Visibility"
									Value="Collapsed"/>
							<Setter TargetName="chevrondown"
									Property="Visibility"
									Value="Collapsed"/>
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Menucommand.ToggleButtonIsChecked}" Value="False" />
								<Condition Binding="{Binding Path=Menucommand.IsTreeviewitemExpanded}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chevronright"
									Property="Visibility"
									Value="Collapsed"/>
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=Menucommand.ToggleButtonIsChecked}" Value="False" />
								<Condition Binding="{Binding Path=Menucommand.IsTreeviewitemExpanded}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chevrondown"
									Property="Visibility"
									Value="Collapsed"/>
							
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsExpandible}" Value="False" />
								<Condition Binding="{Binding Path=Menucommand.IsTreeviewitemExpanded}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chevronright"
									Property="Visibility"
									Value="Collapsed"/>

						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding Path=IsExpandible}" Value="False" />
								<Condition Binding="{Binding Path=Menucommand.IsTreeviewitemExpanded}" Value="False"/>
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chevronright"
									Property="Visibility"
									Value="Collapsed"/>
							<Setter TargetName="chevrondown"
									Property="Visibility"
									Value="Collapsed"/>
						</MultiDataTrigger>
						<!--<DataTrigger Binding="{Binding Path=IsExpandible}" Value="False">
							<Setter TargetName="chevronright"
									Property="Visibility"
									Value="Collapsed"/>
							<Setter TargetName="chevrondown"
									Property="Visibility"
									Value="Collapsed"/>
						</DataTrigger>-->

					
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		
		<EventSetter Event="MouseLeftButtonUp" Handler="OnMouseLeftButtonUp"/>
		<EventSetter Event="MouseRightButtonUp" Handler="OnMouseRightButtonUp"/>
        <!--<EventSetter Event="SizeChanged"  Handler="TreeViewItem_SizeChanged"></EventSetter>-->
              <!--<EventSetter Event="Collapsed"  Handler="TreeViewItem_Collapsed"></EventSetter>-->


        <EventSetter Event="Expanded"  Handler="TreeViewItem_Expanded"></EventSetter>

        <Style.Triggers>

		   
		</Style.Triggers>
		
	</Style>

    <Style x:Key="MeasureMainMenuTreeView" TargetType="TreeView" >
		<Setter Property="Background" Value="Black"></Setter>
		<Setter Property="MaxHeight" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}}"></Setter>
		<Setter Property="BorderBrush" Value="Black"></Setter>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"></Setter>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"></Setter>
		<Setter Property="ItemContainerStyle" Value="{StaticResource Style1}" ></Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <HierarchicalDataTemplate  DataType="{x:Type contract:MeasureGroupCommand}"   ItemsSource="{Binding MacroMeasure, Mode=TwoWay}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TextBlock Style="{StaticResource EMeasureMenuGroupInfoWindow_TextStyle1}" Name="GroupTextBlock" Text="{Binding Menucommand.Label}" Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}"/>

                    </Grid>
                    <HierarchicalDataTemplate.ItemTemplate>
                        <HierarchicalDataTemplate ItemContainerStyle="{StaticResource Style1}" DataType="{x:Type contract:MacroMeasureCommand}" ItemsSource="{Binding SubMeas, Mode=TwoWay}">
                            <StackPanel Orientation="Horizontal">

                                <TextBlock  Style="{StaticResource EMeasureMenuMacroInfoWindow_TextStyle1}"  Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}">
                                    <TextBlock.Text>

                                        <MultiBinding Converter="{StaticResource TextConverterInstance}">
                                            <Binding Path="Menucommand.Label" />
                                            <Binding Path="Menucommand.AuthorsForMenu" />
                                            <Binding Path=" Menucommand.TouchScreenMark"/>
                                        </MultiBinding>
                                        <!--<MultiBinding StringFormat="{}{0}{1}">
											<Binding Path="Label" />

											-->
                                        <!--<Binding Path=" Menucommand.TouchScreenMark,  Converter={StaticResource TextConverterInstance}" />-->
                                        <!--
										</MultiBinding>-->
                                    </TextBlock.Text>
                                </TextBlock>
                                <!--<TextBlock Grid.Column="2" Style="{StaticResource EMeasureMenuMacroInfoWindow_TextStyle1}"  Text="{Binding Path=Menucommand.TouchScreenMark,  Converter={StaticResource TextConverterInstance}, UpdateSourceTrigger=PropertyChanged}"></TextBlock>-->
                                <!--<TextBlock Style="{StaticResource EInfoWindow_TextStyle1}" Text="{Binding Menu}"></TextBlock>-->
                            </StackPanel>
                            <HierarchicalDataTemplate.ItemTemplate>
                                <HierarchicalDataTemplate ItemContainerStyle="{StaticResource Style1}" DataType="{x:Type contract:SubMeasureCommand}">
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock  Style="{StaticResource EMeasureMenuSubInfoWindow_TextStyle1}"  Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TreeView}}}">
													<!--<TextBlock.Text>
														<MultiBinding StringFormat="{}{0}{1}">
															<Binding Path="Label" />
													<Binding Path="Label" />

													--><!--<Binding Path="Menucommand.TouchScreenMark,  Converter={StaticResource TextConverterInstance}, UpdateSourceTrigger=PropertyChanged}" />--><!--
														</MultiBinding>-->

                                            <TextBlock.Text>
                                                <MultiBinding Converter="{StaticResource TextConverterInstance}">
                                                    <Binding Path="Menucommand.Label" />
                                                    <Binding Path="Menucommand.AuthorsForMenu" />

                                                    <Binding Path=" Menucommand.TouchScreenMark"/>
                                                </MultiBinding>

                                            </TextBlock.Text>
                                        </TextBlock>
                                        <!--<TextBlock   Style="{StaticResource EMeasureMenuSubInfoWindow_TextStyle1}"  Text="{Binding Path=Menucommand.TouchScreenMark,  Converter={StaticResource TextConverterInstance}, UpdateSourceTrigger=PropertyChanged}"></TextBlock>-->
                                    </StackPanel>

                                </HierarchicalDataTemplate>

                            </HierarchicalDataTemplate.ItemTemplate>
                        </HierarchicalDataTemplate>
                    </HierarchicalDataTemplate.ItemTemplate>
                </HierarchicalDataTemplate>
            </Setter.Value>
        </Setter>
        <EventSetter Event="Unloaded" Handler="TreeView_Unloaded"/>
    </Style>

	<!-- end of binding treeview for MeasureMenu on mainscreen -->
</ResourceDictionary>